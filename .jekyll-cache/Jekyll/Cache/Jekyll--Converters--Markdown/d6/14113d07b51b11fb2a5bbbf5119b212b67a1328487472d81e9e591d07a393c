I"ê!<h1 id="1-introduction">1 Introduction</h1>

<ul>
  <li>
    <p>Set the course code</p>

    <ol>
      <li>
        <p>Create a repository from GitHub</p>
      </li>
      <li>
        <p>Create a folder <code class="language-plaintext highlighter-rouge">A</code> on local</p>
      </li>
      <li>
        <pre><code class="language-console¬†">$ cd A
$ git clone https://github.com/my_repository.git
$ cd B (Folder inside A)
$ git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp18.git
$ git pull skeleton master
</code></pre>
      </li>
      <li>
        <p>Move the <code class="language-plaintext highlighter-rouge">HelloWorld.java</code> and <code class="language-plaintext highlighter-rouge">HelloNumbers.java</code> that you previously created into the <code class="language-plaintext highlighter-rouge">lab1</code>directory.</p>
      </li>
      <li>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>$ git add lab1/*
$ git commit -m "completed first part of lab1"
$ git push origin master
</pre></td></tr></tbody></table></code></pre></div>        </div>

        <p><br /></p>
      </li>
    </ol>
  </li>
  <li>
    <p>IntelliJ IDEA (Every Time!)</p>

    <ol>
      <li>Open - Choose the project file (not CS61B)</li>
      <li>File - Project Structure - Libraries - + - Java - CS61B/library-sp18/javalib - OK - OK</li>
      <li>File - New Projects Setup - Structure - Project - SDK: choose one - OK - open a file - Setup SDK</li>
    </ol>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>Debugger
    <ul>
      <li>Breakpoints (right click for the breakpoint conditional)</li>
      <li>Stepping over: step by step</li>
      <li>Stepping into: get into the method</li>
      <li>Stepping out: get out of the method</li>
      <li>Resum</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>Some key syntactic features:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">public class</code>: all code lives inside of classes.</p>
      </li>
      <li>
        <p>The code that is run is inside of a method called <code class="language-plaintext highlighter-rouge">main</code>, which is declared as <code class="language-plaintext highlighter-rouge">public static void main(String[] args)</code>.</p>

        <ul>
          <li><code class="language-plaintext highlighter-rouge">void</code>: It has no return type.</li>
          <li><code class="language-plaintext highlighter-rouge">main</code>: This is the name of the method.</li>
          <li><code class="language-plaintext highlighter-rouge">String[] args</code>: This is a parameter that is passed to the main method.</li>
        </ul>
      </li>
      <li>Use <code class="language-plaintext highlighter-rouge">{</code> and <code class="language-plaintext highlighter-rouge">}</code> to denote the beginning and the end of a section of code.</li>
      <li>Statements must end with semi-colons <code class="language-plaintext highlighter-rouge">;</code>.</li>
      <li>Comments with <code class="language-plaintext highlighter-rouge">/* */</code> or <code class="language-plaintext highlighter-rouge">//</code>.</li>
      <li>Javadoc: <code class="language-plaintext highlighter-rouge">/** */</code> for methods or classes.</li>
      <li>
        <p>Compiler and Run Java program via Terminal:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  $ javac name.java
  $ java name
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">static</code> type for all variables and expressions</p>

        <ul>
          <li>Variables must be declared before it is used, and must have a specific type and the type can never change.
            <ul>
              <li>Let the programmer know exactly what sort of objekt is working with</li>
              <li>No type erros</li>
            </ul>
          </li>
        </ul>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      
  <span class="n">string</span> <span class="n">x</span> <span class="o">=</span> <span class="s">"test"</span><span class="o">;</span>  <span class="c1">// error</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">System.out.print</code> will not print a newline (return), <code class="language-plaintext highlighter-rouge">System.out.println</code> will print a newline.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">@param</code> name a varialbe</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="cm">/**
* @param variable name 
* @param expected Expected double
* 
* or
*
* @param("name") String variable
*/</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">static final</code> to declare any constans, e.g. the gravitational constant G</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">G</span> <span class="o">=</span> <span class="mf">6.67</span><span class="n">e</span><span class="o">-</span><span class="mi">11</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">for-each</code> loop: to iterate through elements of arrays and collections</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="cm">/* for (type var : array) { }; */</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">numArray</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span> <span class="o">};</span>    
    
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">numArray</span><span class="o">)</span> <span class="o">{</span>      
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>    
<span class="o">}</span>
    
<span class="c1">// -&gt; 123456 </span>
    
<span class="cm">/* is equivalent to: */</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">numArray</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span> <span class="o">};</span>   
    
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>      
  <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">numArray</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>	<span class="c1">// j is i in first case   </span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>    
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ul>

    <p><br /></p>
  </li>
  <li>
    <p>Functions:</p>

    <ul>
      <li>Functions must be declared as part of a class. A function that is part of a class is method, so all functions are methods.
        <ul>
          <li>To define a function use <code class="language-plaintext highlighter-rouge">public static</code> (e.g. Python <code class="language-plaintext highlighter-rouge">def</code>).</li>
          <li>All parameters of a functions must be declared.</li>
        </ul>
      </li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">LargerDemo</span> <span class="o">{</span>
      <span class="cm">/** Returns the larger of x and y. */</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">larger</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
              <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
          <span class="o">}</span>
          <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
      <span class="o">}</span>
    
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">larger</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
      <span class="o">}</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <p><br /></p>
  </li>
  <li>
    <p>Class</p>

    <ul>
      <li>
        <p>Examle:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="cm">/* Dog.java */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>		<span class="c1">// non-static</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">weightInPounds</span><span class="o">;</span>		<span class="c1">// instance variable </span>
        
    <span class="cm">/* One integer constructor for dogs */</span>
    <span class="kd">public</span> <span class="nf">Dog</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">)</span> <span class="o">{</span>		<span class="c1">// e.g. python def __init__</span>
        <span class="n">weightInPounds</span> <span class="o">=</span> <span class="n">w</span><span class="o">;</span>
    <span class="o">}</span>
        
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeNoise</span><span class="o">()</span> <span class="o">{</span>		<span class="c1">// non-static method </span>
        <span class="k">if</span> <span class="o">(</span><span class="n">weightInPounds</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"yip!"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">weightInPounds</span> <span class="o">&lt;</span> <span class="mi">30</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"bark"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"wooof!"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
    
<span class="cm">/* DogLauncher.java */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DogLauncher</span> <span class="o">{</span>		  <span class="c1">// client of Dog class</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Dog</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">();</span>			<span class="c1">// Declaration a new variable of type Dog</span>
        <span class="n">d</span><span class="o">.</span><span class="na">weightInPounds</span> <span class="o">=</span> <span class="mi">51</span><span class="o">;</span>	<span class="c1">// Instantiation</span>
        <span class="n">d</span><span class="o">.</span><span class="na">makeNoise</span><span class="o">();</span>				 <span class="c1">// Invocation</span>
    <span class="o">}</span>
<span class="o">}</span>
    
<span class="o">&gt;</span> <span class="n">javac</span> <span class="nc">Dog</span><span class="o">.</span><span class="na">java</span>
<span class="o">&gt;</span> <span class="n">javac</span> <span class="nc">DogLauncher</span><span class="o">.</span><span class="na">java</span>
<span class="o">&gt;</span> <span class="n">java</span> <span class="nc">DogLauncher</span>
<span class="n">wooof</span><span class="o">!</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>

        <ul>
          <li>A class that uses another class is sometimes called a ‚Äúclient‚Äù of that class, i.e. <code class="language-plaintext highlighter-rouge">DogLauncher</code> is a client of <code class="language-plaintext highlighter-rouge">Dog</code>.</li>
          <li>Instance variables or non-static variables must be declared inside the class.</li>
          <li>The <code class="language-plaintext highlighter-rouge">makeNoise()</code> is a <strong>non-static / instance</strong> method, and do not have the <code class="language-plaintext highlighter-rouge">static</code> keyword. If the method is going to be invoked by an instance of the class, then it should be non-static. It means, if one method needs to use the instance variable, the method must be non-static.
            <ul>
              <li>To call the <code class="language-plaintext highlighter-rouge">makeNoise</code> method should using the <code class="language-plaintext highlighter-rouge">new</code> keyword to instantiate a <code class="language-plaintext highlighter-rouge">Dog</code>, then call <code class="language-plaintext highlighter-rouge">d.makeNoise()</code>.</li>
            </ul>
          </li>
          <li>The constructor with signature <code class="language-plaintext highlighter-rouge">public Dog(int w)</code> will be invoked anytime that we try to create a <code class="language-plaintext highlighter-rouge">Dog</code> using the <code class="language-plaintext highlighter-rouge">new</code> keyword and a single integer parameter. Similar to Python <code class="language-plaintext highlighter-rouge">__init__</code> method.</li>
        </ul>
      </li>
      <li>
        <p><strong>Non-static</strong> Methods are actions that can be taken only by a specific instance of a class.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nc">Math</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Math</span><span class="o">();</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p><strong>Static</strong> methods are actions that are taken by the class itself.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">x</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p>Non-static:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nc">Dog</span> <span class="nf">maxDog</span><span class="o">(</span><span class="nc">Dog</span> <span class="n">d2</span><span class="o">)</span> <span class="o">{</span>	 <span class="c1">// non-static method</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">weightInPounds</span> <span class="o">&gt;</span> <span class="n">d2</span><span class="o">.</span><span class="na">weightInPounds</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>	<span class="c1">// use the keyword this to refer to the current object</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">d2</span><span class="o">;</span>
<span class="o">}</span>
    
<span class="cm">/* invoke */</span>
<span class="nc">Dog</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">15</span><span class="o">);</span>	
<span class="nc">Dog</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
<span class="n">d</span><span class="o">.</span><span class="na">maxDog</span><span class="o">(</span><span class="n">d2</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p>Static:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">weightInPounds</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">binomen</span> <span class="o">=</span> <span class="s">"Canis familiaris"</span><span class="o">;</span>	<span class="c1">// static variable</span>
    <span class="o">...</span>
<span class="o">}</span>
    
<span class="cm">/* invoke */</span>
<span class="nc">Dog</span><span class="o">.</span><span class="na">binomen</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ul>

    <p><br /></p>
  </li>
  <li>
    <p>Arrays of objects</p>

    <ul>
      <li>use <code class="language-plaintext highlighter-rouge">new</code> keyword to create the array</li>
      <li>use <code class="language-plaintext highlighter-rouge">new</code> again for each object that needs to put in the array</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="cm">/* example 1 */</span>
<span class="nc">Dog</span><span class="o">[]</span> <span class="n">dogs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>		<span class="c1">// Creates an array of Dogs of size 2</span>
<span class="n">dogs</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">8</span><span class="o">);</span>			  <span class="c1">// dog 1 has value of 8 </span>
<span class="n">dogs</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
<span class="n">dogs</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">makeNoise</span><span class="o">();</span>			  <span class="c1">// dog 1 invoke the method </span>
  
<span class="cm">/* example 2 */</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">name</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
<span class="n">name</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="n">name</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> 
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h1 id="2-lists">2. Lists</h1>

<h2 id="21-sllist-singly-linked-list">2.1 SLList (Singly Linked List)</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IntNode</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">item</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">next</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">IntNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="nc">IntNode</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="n">next</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SLList</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">first</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">SLList</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">first</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="cm">/** Adds x to the front of the list. */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">first</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">first</span><span class="o">);</span>
    <span class="o">}</span>
    
  <span class="cm">/** Returns the first item in the list. */</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFirst</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">first</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/* Creates a list of one integer, namely 10 */</span>
      	<span class="nc">SLList</span> <span class="no">L</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SLList</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="no">L</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="no">L</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span>	<span class="c1">// outputs 10</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<ul>
  <li>
    <p>Public vs. Private</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="cm">/* change public to private */</span>
<span class="kd">private</span> <span class="nc">IntNode</span> <span class="n">first</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>Private variables and methods can only be accessed by code inside the same <code class="language-plaintext highlighter-rouge">.java</code> file, e.g. in this case <code class="language-plaintext highlighter-rouge">SLList.java</code>. Other class can not invoke <code class="language-plaintext highlighter-rouge">first</code>. But can through <code class="language-plaintext highlighter-rouge">public</code> methods like <code class="language-plaintext highlighter-rouge">public void addFirst</code> to invoke or edit <code class="language-plaintext highlighter-rouge">first</code>.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>Nested Class</p>

    <ul>
      <li>Put a class inside of another class. Do not need two java files.</li>
      <li>If the nested class has no need to use any of the instance methods or variables of enclosing class, then can declare with <code class="language-plaintext highlighter-rouge">static</code>. Which means that methods inside of static class can not access any of the members of the enclosing class.</li>
      <li>e.g. <code class="language-plaintext highlighter-rouge">IntNode</code> class is depends on <code class="language-plaintext highlighter-rouge">SLList</code> class, so can put in inside of <code class="language-plaintext highlighter-rouge">SLList</code></li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SLList</span> <span class="o">{</span> 
    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">IntNode</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">int</span> <span class="n">item</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">Node</span> <span class="n">next</span><span class="o">;</span>
  
        <span class="kd">public</span> <span class="nf">IntNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="nc">IntNode</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">item</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="n">next</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">first</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">SLList</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">first</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
      
    <span class="cm">/** Adds an item to the front of the list */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">first</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">first</span><span class="o">);</span>
    <span class="o">}</span>
      
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFirst</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">first</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
    <span class="o">}</span>
      
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SLList</span> <span class="no">L</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SLList</span><span class="o">(</span><span class="mi">15</span><span class="o">);</span>
        <span class="no">L</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="no">L</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>
        <p>addLast and size</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="cm">/** Adds an itemto the end of the list. */</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
  <span class="nc">IntNote</span> <span class="n">p</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
      
  <span class="cm">/* Move p until it reaches the end of the list. */</span>
  <span class="k">while</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
  <span class="o">}</span>
      
  <span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNote</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="o">}</span>
    
<span class="cm">/** helper function 
	* Returns the size of the list that starts at IntNode p. */</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">(</span><span class="nc">IntNode</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">size</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
<span class="o">}</span>
    
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">size</span><span class="o">(</span><span class="n">first</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>

        <ul>
          <li>use <code class="language-plaintext highlighter-rouge">private static</code> for helper function, to define this function can not invoked by outside.</li>
          <li><code class="language-plaintext highlighter-rouge">addLast()</code> is slow. Because we have to start at the front, and loop all the way to the back of our list before adding our element.</li>
        </ul>
      </li>
    </ul>

    <p><br /></p>

    <ul>
      <li>
        <p><strong>Sentinel Nodes:</strong></p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="cm">/** Creates an empty SLList */</span>
<span class="kd">public</span> <span class="nf">SLList</span><span class="o">(){</span>
  <span class="n">sentinel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
  <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
    
<span class="kd">public</span> <span class="nf">SLList</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
  <span class="n">sentinel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
  <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
  <span class="n">size</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span> 
    
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
  <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
  <span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
    
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFirst</span><span class="o">(){</span>
  <span class="k">return</span> <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
<span class="o">}</span>
    
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="nc">IntNode</span> <span class="n">p</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">;</span>
      
    <span class="k">while</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>

        <ul>
          <li>It‚Äôs the first node and it‚Äôs a dummy node, and not contains in the list.</li>
          <li>It can be any number, because it will not be used. Its for <code class="language-plaintext highlighter-rouge">addLast</code>.</li>
          <li>A <code class="language-plaintext highlighter-rouge">SLList</code> with a sentinel node has at least the following invariants:
            <ul>
              <li>The <code class="language-plaintext highlighter-rouge">sentinel</code> reference always points to a sentinel node.</li>
              <li>The front item (if it exists), is always at <code class="language-plaintext highlighter-rouge">sentinel.next.item</code>.</li>
              <li>The <code class="language-plaintext highlighter-rouge">size</code> variable is always the total number of items that have been added.</li>
              <li>Inserting at the back of an SLList is much slower than the front.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="22--dllist-doubly-linked-list">2.2  DLList (Doubly Linked List)</h2>

<ul>
  <li>
    <p>A node has a pointer to the next and the previous node. 4There‚Äôs two way to implement it:</p>

    <ol>
      <li>
        <p>Double Sentinel: There‚Äôs a Sentinel Node at front and the end. <code class="language-plaintext highlighter-rouge">SentFront.next</code> is points to the first real Node, <code class="language-plaintext highlighter-rouge">prev</code> points to <code class="language-plaintext highlighter-rouge">null</code>. And <code class="language-plaintext highlighter-rouge">SentBack.next</code> points to <code class="language-plaintext highlighter-rouge">null</code>, <code class="language-plaintext highlighter-rouge">prev</code> points to the last real Node.</p>

        <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/double_sentinel.png?raw=true" alt="double_sentinel" style="zoom:50%;" /></p>
      </li>
      <li>
        <p>Circular Sentinel: Only need one Sentinel Node, and this Sentinel Node <code class="language-plaintext highlighter-rouge">next</code> points to the first real Node, <code class="language-plaintext highlighter-rouge">prev</code> points to the last real Node. If there‚Äôs no node, <code class="language-plaintext highlighter-rouge">next</code> and <code class="language-plaintext highlighter-rouge">prev</code> point to itself.</p>

        <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/circular_sentinel.png?raw=true" alt="circular_sentinel" style="zoom:50%;" /></p>
      </li>
    </ol>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>Generic List: <code class="language-plaintext highlighter-rouge">&lt;PLACEHOLDER&gt;</code> after the class name. This allows the list to work not only for <code class="language-plaintext highlighter-rouge">int</code>, but also for i.e., <code class="language-plaintext highlighter-rouge">string</code> too.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="cm">/** Make a placeholder for this class, so you can declare the type later */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DLList</span><span class="o">&lt;</span><span class="no">HERE</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">IntNode</span> <span class="n">sentinel</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
  
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">IntNode</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">prev</span><span class="o">;</span>
        <span class="kd">public</span> <span class="no">HERE</span> <span class="n">item</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">next</span><span class="o">;</span>
        <span class="o">...</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>
  
<span class="cm">/** HERE is now Integer, so d1 is a int */</span>
<span class="nc">DLList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DLList</span><span class="o">&lt;&gt;(</span><span class="mi">5</span><span class="o">);</span>
<span class="n">d1</span><span class="o">.</span><span class="na">insertFront</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
  
<span class="cm">/** HERE is now String, so d2 is a String */</span>
<span class="nc">DLList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DLList</span><span class="o">&lt;&gt;(</span><span class="s">"hello"</span><span class="o">);</span>
<span class="n">d2</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="s">"world"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>int: Integer</li>
      <li>double: Double</li>
      <li>char: Character</li>
      <li>boolean: Boolean</li>
      <li>long: Long</li>
    </ul>
  </li>
</ul>

<h2 id="23--alist-array-list">2.3  AList (Array List)</h2>

<ul>
  <li>There are three valid notations for array creation
    <ul>
      <li><code class="language-plaintext highlighter-rouge">y = new int[3];</code></li>
      <li><code class="language-plaintext highlighter-rouge">x = new int[]{1, 2, 3, 4, 5};</code></li>
      <li><code class="language-plaintext highlighter-rouge">int[] w = {9, 10, 11, 12, 13};</code></li>
    </ul>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>
    <p>2D Array</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[][]</span> <span class="n">pascalsTriangle</span><span class="o">;</span>					<span class="c1">// declaration</span>
<span class="n">pasacalsTriangle</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">4</span><span class="o">][];</span>	<span class="c1">// a 2D array contains four 1D array</span>
  
<span class="n">pascalsTriangle</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">1</span><span class="o">};</span><span class="c1">// give a value at position 0</span>
  
<span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">;</span>
<span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">4</span><span class="o">][</span><span class="mi">4</span><span class="o">];</span>					 <span class="c1">// four 2D array contain 5 int 1D array </span>
  
<span class="cm">/** all togher */</span>
<span class="kt">int</span><span class="o">[][]</span> <span class="n">pascalAgain</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[][]{</span> <span class="o">{</span><span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">}};</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>Alist:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">T</span><span class="o">[]</span> <span class="n">items</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
      
    <span class="cm">/** Creates an empty list */</span>
    <span class="kd">public</span> <span class="nf">AList</span><span class="o">()</span> <span class="o">{</span>
      	<span class="cm">/* Casts, if we want to use &lt;T&gt;: must new a Objetc 
           then transfer the arrys type */</span>
        <span class="n">items</span> <span class="o">=</span> <span class="o">(</span><span class="no">T</span><span class="o">[])</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
      
  	<span class="cm">/** Resizes the underlying array to the target capacity */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">resize</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">T</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">(</span><span class="no">T</span><span class="o">[])</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="n">capacity</span><span class="o">];</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">items</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
        <span class="n">items</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
      
    <span class="cm">/** Inserts X into the back of the list */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="no">T</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/* Resize items since its full */</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">// faster </span>
          <span class="n">resize</span><span class="o">(</span><span class="n">size</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span> 
        <span class="o">}</span>
        <span class="n">items</span><span class="o">[</span><span class="n">size</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">size</span> <span class="o">=</span> <span class="n">size</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
      
    <span class="cm">/** Returns the item from the back of the list */</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getLast</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">items</span><span class="o">[</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
    <span class="o">}</span>
      
   	<span class="cm">/** Deletes item from back of the list and returns deleted item */</span>	
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">removeLast</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="n">getLast</span><span class="o">();</span>
      	<span class="cm">/* not necessary */</span>
        <span class="n">items</span><span class="o">[</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>	
        <span class="n">size</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">last</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h1 id="3-testing">3. Testing</h1>

<ul>
  <li><strong>Ad Hoc Testing</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="cm">/** Tests the Sort class. */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestSort</span> <span class="o">{</span>
    <span class="cm">/** Tests the sort method of the Sort class. */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testSort</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="o">{</span><span class="s">"i"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">expected</span> <span class="o">=</span> <span class="o">{</span><span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"i"</span><span class="o">};</span>
      
        <span class="nc">Sort</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
      
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">expected</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Mismatch in position "</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">", 
                                   expected: "</span> <span class="o">+</span> <span class="n">expected</span> <span class="o">+</span> <span class="s">", but got: "</span> <span class="o">+</span>
                                   <span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">"."</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">testSort</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>
    <p><strong>JUnit Testing</strong></p>

    <ul>
      <li>Precede each method with <code class="language-plaintext highlighter-rouge">@org.junit.Test</code> (no semi-colon).</li>
      <li>Change each test method to be <strong>non</strong>-static.</li>
      <li>Remove our <code class="language-plaintext highlighter-rouge">main</code> method from the <code class="language-plaintext highlighter-rouge">TestSort</code> class.</li>
      <li>Run the Code: Run -&gt; Run</li>
      <li><code class="language-plaintext highlighter-rouge">import org.junit.Test;</code> -&gt; simply use <code class="language-plaintext highlighter-rouge">@Test</code></li>
      <li><code class="language-plaintext highlighter-rouge">import static org.junit.Assert.*;</code> -&gt; <code class="language-plaintext highlighter-rouge">assertEquals(expected2, actual2)</code></li>
      <li>See ‚ÄúSelection Sort‚Äù</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testSort</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="o">{</span><span class="s">"i"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">expected</span> <span class="o">=</span> <span class="o">{</span><span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"i"</span><span class="o">};</span>
    <span class="nc">Sort</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
  	<span class="cm">/** Use `org.junit` library */</span>
    <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertArrayEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">input</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>Selection Sort</p>

    <ol>
      <li>Find the smallest item.</li>
      <li>Move it to the front.</li>
      <li>Selection sort the remaining N-1 items (without touching the front item).</li>
    </ol>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="cm">/* Sort Class */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sort</span> <span class="o">{</span>
    <span class="cm">/** Sorts strings destructively. */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> 
       <span class="c1">// selection sort the rest (using recursion by helper methods) </span>
			<span class="n">sort</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
    
  	<span class="cm">/** Sorts strings destructively starting from item start. */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span> 
       <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
           <span class="k">return</span><span class="o">;</span>
       <span class="o">}</span>
       <span class="c1">// find the smallest item</span>
   		<span class="kt">int</span> <span class="n">smallestIndex</span> <span class="o">=</span> <span class="n">findSmallest</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">start</span><span class="o">);</span>
       <span class="c1">// move it to the front</span>
       <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">smallestIndex</span><span class="o">);</span>
       <span class="n">sort</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
  
  	<span class="cm">/** Swap item a with b */</span>
  	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">a</span><span class="o">];</span>
        <span class="n">x</span><span class="o">[</span><span class="n">a</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">b</span><span class="o">];</span>
        <span class="n">x</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
		<span class="o">}</span>
    
    <span class="cm">/** Returns the smallest string in x. */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findSmallest</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">smallestIndex</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">compareTo</span><span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">smallestIndex</span><span class="o">]);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">smallestIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">smallestIndex</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.*;</span>
  
<span class="cm">/* TestSort Class */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestSort</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="cm">/** Test the Sort.findSmallest method. */</span>
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindSmallest</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="o">{</span><span class="s">"i"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">expected</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
  
        <span class="kt">int</span> <span class="n">actual</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">findSmallest</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="c1">// org.junit.Assert.assertEquals(expected, actual);   </span>
      	<span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">);</span> 
  
        <span class="nc">String</span><span class="o">[]</span> <span class="n">input2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"there"</span><span class="o">,</span> <span class="s">"are"</span><span class="o">,</span> <span class="s">"many"</span><span class="o">,</span> <span class="s">"pigs"</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">expected2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
  
        <span class="kt">int</span> <span class="n">actual2</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">findSmallest</span><span class="o">(</span><span class="n">input2</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="c1">// org.junit.Assert.assertEquals(expected2, actual2);</span>
      	<span class="n">assertEquals</span><span class="o">(</span><span class="n">expected2</span><span class="o">,</span> <span class="n">actual2</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="cm">/** Test the Sort.swap method. */</span>
  	<span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSwap</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="o">{</span><span class="s">"i"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">expected</span> <span class="o">=</span> <span class="o">{</span><span class="s">"an"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"i"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>
  
        <span class="nc">Sort</span><span class="o">.</span><span class="na">swap</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
        <span class="c1">// org.junit.Assert.assertArrayEquals(expected, input);</span>
      	<span class="n">assertArrayEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">input</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h1 id="n-examples">n Examples</h1>

:ET
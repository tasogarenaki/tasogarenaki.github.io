I"N<h1 id="1-introduction">1 Introduction</h1>

<ul>
  <li>
    <p>Set the course code</p>

    <ol>
      <li>
        <p>Create a repository from GitHub</p>
      </li>
      <li>
        <p>Create a folder <code class="language-plaintext highlighter-rouge">A</code> on local</p>
      </li>
      <li>
        <pre><code class="language-consoleÂ ">$ cd A
$ git clone https://github.com/my_repository.git
$ cd B (Folder inside A)
$ git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp18.git
$ git pull skeleton master
</code></pre>
      </li>
      <li>
        <p>Move the <code class="language-plaintext highlighter-rouge">HelloWorld.java</code> and <code class="language-plaintext highlighter-rouge">HelloNumbers.java</code> that you previously created into the <code class="language-plaintext highlighter-rouge">lab1</code>directory.</p>
      </li>
      <li>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre>$ git add lab1/*
$ git commit -m "completed first part of lab1"
$ git push origin master
</pre></td></tr></tbody></table></code></pre></div>        </div>

        <p><br /></p>
      </li>
    </ol>
  </li>
  <li>
    <p>Some key syntactic features:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">public class</code>: all code lives inside of classes.</p>
      </li>
      <li>
        <p>The code that is run is inside of a method called <code class="language-plaintext highlighter-rouge">main</code>, which is declared as <code class="language-plaintext highlighter-rouge">public static void main(String[] args)</code>.</p>

        <ul>
          <li><code class="language-plaintext highlighter-rouge">void</code>: It has no return type.</li>
          <li><code class="language-plaintext highlighter-rouge">main</code>: This is the name of the method.</li>
          <li><code class="language-plaintext highlighter-rouge">String[] args</code>: This is a parameter that is passed to the main method.</li>
        </ul>
      </li>
      <li>Use <code class="language-plaintext highlighter-rouge">{</code> and <code class="language-plaintext highlighter-rouge">}</code> to denote the beginning and the end of a section of code.</li>
      <li>Statements must end with semi-colons <code class="language-plaintext highlighter-rouge">;</code>.</li>
      <li>Comments with <code class="language-plaintext highlighter-rouge">/* */</code> or <code class="language-plaintext highlighter-rouge">//</code>.</li>
      <li>Javadoc: <code class="language-plaintext highlighter-rouge">/** */</code> for methods or classes.</li>
      <li>
        <p>Compiler and Run Java program via Terminal:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>  $ javac name.java
  $ java name
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">static</code> type for all variables and expressions</p>

        <ul>
          <li>Variables must be declared before it is used, and must have a specific type and the type can never change.
            <ul>
              <li>Let the programmer know exactly what sort of objekt is working with</li>
              <li>No type erros</li>
            </ul>
          </li>
        </ul>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td> --><td class="rouge-code"><pre>  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      
  <span class="n">string</span> <span class="n">x</span> <span class="o">=</span> <span class="s">"test"</span><span class="o">;</span>  <span class="c1">// error</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li><code class="language-plaintext highlighter-rouge">System.out.print</code> will not print a newline (return), <code class="language-plaintext highlighter-rouge">System.out.println</code> will print a newline.</li>
    </ul>

    <p><br /></p>
  </li>
  <li>
    <p>Functions:</p>

    <ul>
      <li>Functions must be declared as part of a class. A function that is part of a class is method, so all functions are methods.
        <ul>
          <li>To define a function use <code class="language-plaintext highlighter-rouge">public static</code> (e.g. Python <code class="language-plaintext highlighter-rouge">def</code>).</li>
          <li>All parameters of a functions must be declared.</li>
        </ul>
      </li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td> --><td class="rouge-code"><pre>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">LargerDemo</span> <span class="o">{</span>
      <span class="cm">/** Returns the larger of x and y. */</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">larger</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
              <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
          <span class="o">}</span>
          <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
      <span class="o">}</span>
    
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">larger</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
      <span class="o">}</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <p><br /></p>
  </li>
  <li>
    <p>Class</p>

    <ul>
      <li>
        <p>Examle:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td> --><td class="rouge-code"><pre><span class="cm">/* Dog.java */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>		<span class="c1">// non-static</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">weightInPounds</span><span class="o">;</span>		<span class="c1">// instance variable </span>
        
    <span class="cm">/* One integer constructor for dogs */</span>
    <span class="kd">public</span> <span class="nf">Dog</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">)</span> <span class="o">{</span>		<span class="c1">// e.g. python def __init__</span>
        <span class="n">weightInPounds</span> <span class="o">=</span> <span class="n">w</span><span class="o">;</span>
    <span class="o">}</span>
        
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeNoise</span><span class="o">()</span> <span class="o">{</span>		<span class="c1">// non-static method </span>
        <span class="k">if</span> <span class="o">(</span><span class="n">weightInPounds</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"yip!"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">weightInPounds</span> <span class="o">&lt;</span> <span class="mi">30</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"bark"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"wooof!"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
    
<span class="cm">/* DogLauncher.java */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DogLauncher</span> <span class="o">{</span>		  <span class="c1">// client of Dog class</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Dog</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">();</span>			<span class="c1">// Declaration a new variable of type Dog</span>
        <span class="n">d</span><span class="o">.</span><span class="na">weightInPounds</span> <span class="o">=</span> <span class="mi">51</span><span class="o">;</span>	<span class="c1">// Instantiation</span>
        <span class="n">d</span><span class="o">.</span><span class="na">makeNoise</span><span class="o">();</span>				 <span class="c1">// Invocation</span>
    <span class="o">}</span>
<span class="o">}</span>
    
<span class="o">&gt;</span> <span class="n">javac</span> <span class="nc">Dog</span><span class="o">.</span><span class="na">java</span>
<span class="o">&gt;</span> <span class="n">javac</span> <span class="nc">DogLauncher</span><span class="o">.</span><span class="na">java</span>
<span class="o">&gt;</span> <span class="n">java</span> <span class="nc">DogLauncher</span>
<span class="n">wooof</span><span class="o">!</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>

        <ul>
          <li>A class that uses another class is sometimes called a âclientâ of that class, i.e. <code class="language-plaintext highlighter-rouge">DogLauncher</code> is a client of <code class="language-plaintext highlighter-rouge">Dog</code>.</li>
          <li>Instance variables or non-static variables must be declared inside the class.</li>
          <li>The <code class="language-plaintext highlighter-rouge">makeNoise()</code> is a <strong>non-static / instance</strong> method, and do not have the <code class="language-plaintext highlighter-rouge">static</code> keyword. If the method is going to be invoked by an instance of the class, then it should be non-static. It means, if one method needs to use the instance variable, the method must be non-static.
            <ul>
              <li>To call the <code class="language-plaintext highlighter-rouge">makeNoise</code> method should using the <code class="language-plaintext highlighter-rouge">new</code> keyword to instantiate a <code class="language-plaintext highlighter-rouge">Dog</code>, then call <code class="language-plaintext highlighter-rouge">d.makeNoise()</code>.</li>
            </ul>
          </li>
          <li>The constructor with signature <code class="language-plaintext highlighter-rouge">public Dog(int w)</code> will be invoked anytime that we try to create a <code class="language-plaintext highlighter-rouge">Dog</code> using the <code class="language-plaintext highlighter-rouge">new</code> keyword and a single integer parameter. Similar to Python <code class="language-plaintext highlighter-rouge">__init__</code> method.</li>
        </ul>
      </li>
      <li>
        <p><strong>Non-static</strong> Methods are actions that can be taken only by a specific instance of a class.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="nc">Math</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Math</span><span class="o">();</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p><strong>Static</strong> methods are actions that are taken by the class itself.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre><span class="n">x</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p>Static and non-static:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td> --><td class="rouge-code"><pre><span class="kd">public</span> <span class="nc">Dog</span> <span class="nf">maxDog</span><span class="o">(</span><span class="nc">Dog</span> <span class="n">d2</span><span class="o">)</span> <span class="o">{</span>	 <span class="c1">// non-static method</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">weightInPounds</span> <span class="o">&gt;</span> <span class="n">d2</span><span class="o">.</span><span class="na">weightInPounds</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>	<span class="c1">// use the keyword this to refer to the current object</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">d2</span><span class="o">;</span>
<span class="o">}</span>
    
<span class="cm">/* invoke */</span>
<span class="nc">Dog</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">15</span><span class="o">);</span>	
<span class="nc">Dog</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
<span class="n">d</span><span class="o">.</span><span class="na">maxDog</span><span class="o">(</span><span class="n">d2</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p>Static Variables</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td> --><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">weightInPounds</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">binomen</span> <span class="o">=</span> <span class="s">"Canis familiaris"</span><span class="o">;</span>	<span class="c1">// static variable</span>
    <span class="o">...</span>
<span class="o">}</span>
    
<span class="cm">/* invoke */</span>
<span class="nc">Dog</span><span class="o">.</span><span class="na">binomen</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ul>

    <p><br /></p>
  </li>
  <li>
    <p>Arrays of objects</p>

    <ul>
      <li>use <code class="language-plaintext highlighter-rouge">new</code> keyword to create the array</li>
      <li>use <code class="language-plaintext highlighter-rouge">new</code> again for each object that needs to put in the array</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td> --><td class="rouge-code"><pre><span class="cm">/* example 1 */</span>
<span class="nc">Dog</span><span class="o">[]</span> <span class="n">dogs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>		<span class="c1">// Creates an array of Dogs of size 2</span>
<span class="n">dogs</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">8</span><span class="o">);</span>			  <span class="c1">// dog 1 has value of 8 </span>
<span class="n">dogs</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
<span class="n">dogs</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">makeNoise</span><span class="o">();</span>			  <span class="c1">// dog 1 invoke the method </span>
  
<span class="cm">/* example 2 */</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">name</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
<span class="n">name</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="n">name</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> 
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h2 id="11-theme-x">1.1 Theme x</h2>

<h1 id="2-examples">2 Examples</h1>

:ET
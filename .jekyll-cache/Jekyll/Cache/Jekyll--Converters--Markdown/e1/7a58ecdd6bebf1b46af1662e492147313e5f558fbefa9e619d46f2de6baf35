I"$<h1 id="1-introduction">1. Introduction</h1>

<p>The textbook is seen <a href="https://algs4.cs.princeton.edu/home/">here</a>, and the code is seen <a href="https://algs4.cs.princeton.edu/code/">here</a>.</p>

<h1 id="2-union-find">2. Union-Find</h1>

<h2 id="21-quick-find">2.1 Quick Find</h2>

<p>Data structure</p>

<ul>
  <li>
    <p>Integer array id[] of length N.</p>
  </li>
  <li>
    <p>Interpretation: p and q are connected iff they have the same id.</p>
  </li>
</ul>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/algorithms/part_i/quickfind1.png?raw=true" alt="quickfind1" style="zoom:70%;" /></p>

<p><strong>Find:</strong> Check if p and q have the same id.</p>

<p><strong>Union:</strong> To merge components containing p and q, change all entries whose id equals id[p] to id[q].</p>

<h2 id="22-quick-union">2.2 Quick Union</h2>

<p>Data structure</p>

<ul>
  <li>Integer array id[] of length N.</li>
  <li>Interpretation: id[i] is parent of i.</li>
  <li>Root of i is id[id[id[…id[i]…]]].</li>
</ul>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/algorithms/part_i/quickunion1.png?raw=true" alt="quickunion1" style="zoom:40%;" /></p>

<p><strong>Find:</strong> Check if p and q have the same root.</p>

<p><strong>Union:</strong> To merge components containing p and q, set the id of p’s root to the id of q’s root.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/algorithms/part_i/quickunion2.png?raw=true" alt="quickunion2" style="zoom:40%;" /></p>

<h2 id="23-weighted-quick-union">2.3 Weighted Quick Union</h2>

<p>Data structure: Same as quick-union, but maintain extra array sz[i] to count number of objects in the tree rooted at i.</p>

<ul>
  <li>Modify quick-union to avoid tall trees.</li>
  <li>Keep track of size of each tree (number of objects).</li>
  <li>Balance by linking root of smaller tree to root of larger tree.</li>
</ul>

<p>Finde: Identical to quick union.</p>

<p>Union: Modify quick-union to:</p>

<ul>
  <li>Link root of smaller tree to root of larger tree.</li>
  <li>Update the sz[] array.</li>
</ul>

<h1 id="3-analysis-of-algorithms">3. Analysis of Algorithms</h1>

<h2 id="31-order-of-growth-classifications">3.1 Order-of-Growth Classifications</h2>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/algorithms/part_i/orderofgrowth.png?raw=true" alt="orderofgrowth" style="zoom:30%;" /></p>

<h1 id="4-stacks-and-queues">4. Stacks and Queues</h1>

<h2 id="41-stacks">4.1 Stacks</h2>

<p>Stack:</p>

<ul>
  <li>LIFO</li>
  <li>push: insert</li>
  <li>pop: remove and return most recently added</li>
</ul>

<p><strong>Linked-List Implementation:</strong> A stack with N items uses 40 N bytes.</p>

<ul>
  <li>
    <p>pop: save item to return $\rightarrow$ delete first node and point to next $\rightarrow$ return saved item</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/algorithms/part_i/stack_linked_pop.png?raw=true" alt="stack_linked_pop" style="zoom:30%;" /></p>
  </li>
  <li>
    <p>push: save a link to the list $\rightarrow$ create a new node for the beginning $\rightarrow$ set the instance variables in the new node</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/algorithms/part_i/stack_linked_push.png?raw=true" alt="stack_linked_push" style="zoom:30%;" /></p>
  </li>
</ul>

<p><strong>Array Implementation:</strong></p>

<ul>
  <li>pop(): add new item at s[N].</li>
  <li>push(): remove item from s[N-1].</li>
</ul>

<p><strong>Resizing-Array Implementation:</strong></p>

<ul>
  <li>If array is full, create a new array of twice the size, and copy items.</li>
  <li>To shrink array: push() $\rightarrow$ double size of s[] when array is full; pop() $\rightarrow$ halve size of s[] when array is 1/4 full.</li>
</ul>

<h2 id="42-queues">4.2 Queues</h2>

<p>Queue: with two pointers.</p>

<ul>
  <li>FIFO</li>
  <li>enqueue: insert</li>
  <li>dequeue: remove and return least recently added</li>
</ul>

<p><strong>Linked-List Implementation:</strong></p>

<ul>
  <li>pop: identical to Stack.</li>
  <li>push: save a link to the last node $\rightarrow$ create a new node for the end $\rightarrow$ link the new node to the end of the list.</li>
</ul>

<p><strong>Resizing-Array Implementation:</strong></p>

<ul>
  <li>Use array q[] to store items in queue.</li>
  <li>enqueue(): add new item at q[tail].</li>
  <li>dequeue(): remove item from q[head].</li>
  <li>Update head and tail modulo the capacity.</li>
  <li>Add resizing array.</li>
</ul>

<h2 id="43-iteration">4.3 Iteration</h2>

<p>Iterable has a method that returns an Iterator and <code class="language-plaintext highlighter-rouge">Iterator</code> has methods <code class="language-plaintext highlighter-rouge">hasNext()</code> and <code class="language-plaintext highlighter-rouge">next()</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="cm">/* "foreach" statement (shorthand) */</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">stack</span><span class="o">)</span> 
  <span class="nc">StdOut</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>

<span class="cm">/* equivalent code (longhand) */</span>
<span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
<span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
  <span class="nc">String</span> <span class="n">s</span><span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
  <span class="nc">StdOut</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="5-sorting">5. Sorting</h1>

<p><strong>Selection Sort:</strong> In iteration i, find index min of smallest remaining entry. Then swap a[i] and a[min]. Each time must scan the full remaining entries.</p>

<p><strong>Insertion Sort:</strong> In iteration i, swap a[i] with each larger entry to its left.</p>

<p><strong>Shellsort:</strong> Move entries more than one position at a time by h-sorting the array. An h-sorted array is h interleaved sorted subsequences.</p>

<p><strong>Knuth Shuffling:</strong> In iteration i, pick integer r between 0 and I uniformly at <strong>random</strong>. Then swap a[i] and a[r].</p>

:ET
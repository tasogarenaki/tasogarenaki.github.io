I"åè<h1 id="1-introduction">1 Introduction</h1>

<p>Set the course code</p>

<ol>
  <li>
    <p>Create a repository from GitHub</p>
  </li>
  <li>
    <p>Create a folder <code class="language-plaintext highlighter-rouge">A</code> on local</p>
  </li>
  <li>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span><span class="nb">cd </span>A
<span class="nv">$ </span>git clone https://github.com/my_repository.git
<span class="nv">$ </span><span class="nb">cd </span>B <span class="o">(</span>Folder inside A<span class="o">)</span>
<span class="nv">$ </span>git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp18.git
<span class="nv">$ </span>git pull skeleton master
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>Move the <code class="language-plaintext highlighter-rouge">HelloWorld.java</code> and <code class="language-plaintext highlighter-rouge">HelloNumbers.java</code> that you previously created into the <code class="language-plaintext highlighter-rouge">lab1</code>directory.</p>
  </li>
  <li>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>git add lab1/<span class="k">*</span>
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"completed first part of lab1"</span>
<span class="nv">$ </span>git push origin master
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ol>

<p>IntelliJ IDEA (Every Time!)</p>

<ol>
  <li>Open - Choose the project file (not CS61B)</li>
  <li>File - Project Structure - Libraries - + - Java - CS61B/library-sp18/javalib - OK - OK</li>
  <li>File - New Projects Setup - Structure - Project - SDK: choose one - OK - open a file - Setup SDK</li>
</ol>

<p>Debugger</p>
<ul>
  <li>Breakpoints (right click for the breakpoint conditional)</li>
  <li>Stepping over: step by step</li>
  <li>Stepping into: get into the method</li>
  <li>Stepping out: get out of the method</li>
  <li>
    <p>Resume</p>
  </li>
  <li>
    <p>Some shortcuts:</p>

    <ul>
      <li>Run: control + option + R</li>
    </ul>
  </li>
</ul>

<p>Some key syntactic features:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">public class</code>: all code lives inside of classes.</p>
  </li>
  <li>
    <p>The code that is run is inside of a method called <code class="language-plaintext highlighter-rouge">main</code>, which is declared as <code class="language-plaintext highlighter-rouge">public static void main(String[] args)</code>.</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">void</code>: It has no return type.</li>
      <li><code class="language-plaintext highlighter-rouge">main</code>: This is the name of the method.</li>
      <li><code class="language-plaintext highlighter-rouge">String[] args</code>: This is a parameter that is passed to the main method.</li>
    </ul>
  </li>
  <li>Use <code class="language-plaintext highlighter-rouge">{</code> and <code class="language-plaintext highlighter-rouge">}</code> to denote the beginning and the end of a section of code.</li>
  <li>Statements must end with semi-colons <code class="language-plaintext highlighter-rouge">;</code>.</li>
  <li>Comments with <code class="language-plaintext highlighter-rouge">/* */</code> or <code class="language-plaintext highlighter-rouge">//</code>.</li>
  <li>Javadoc: <code class="language-plaintext highlighter-rouge">/** */</code> for methods or classes.</li>
  <li>
    <p>Compiler and Run Java program via Terminal:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>  <span class="nv">$ </span>javac name.java
  <span class="nv">$ </span>java name
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">static</code> type for all variables and expressions</p>

    <ul>
      <li>Variables must be declared before it is used, and must have a specific type and the type can never change.
        <ul>
          <li>Let the programmer know exactly what sort of objekt is working with</li>
          <li>No type erros</li>
        </ul>
      </li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
  <span class="n">string</span> <span class="n">x</span> <span class="o">=</span> <span class="s">"test"</span><span class="o">;</span>  <span class="c1">// error</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">System.out.print</code> will not print a newline (return), <code class="language-plaintext highlighter-rouge">System.out.println</code> will print a newline.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@param</code> name a varialbe</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="cm">/**
* @param variable name 
* @param expected Expected double
* 
* or
*
* @param("name") String variable
*/</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">static final</code> to declare any constans, e.g. the gravitational constant G</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">G</span> <span class="o">=</span> <span class="mf">6.67</span><span class="n">e</span><span class="o">-</span><span class="mi">11</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">for-each</code> loop: to iterate through elements of arrays and collections</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="cm">/* for (type var : array) { }; */</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">numArray</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span> <span class="o">};</span>    
    
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">numArray</span><span class="o">)</span> <span class="o">{</span>      
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>    
<span class="o">}</span>
    
<span class="c1">// -&gt; 123456 </span>
    
<span class="cm">/* is equivalent to: */</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">numArray</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span> <span class="o">};</span>   
    
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numArray</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>      
  <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">numArray</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>	<span class="c1">// j is i in first case   </span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>    
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Functions:</p>

    <ul>
      <li>Functions must be declared as part of a class. A function that is part of a class is method, so all functions are methods.
        <ul>
          <li>To define a function use <code class="language-plaintext highlighter-rouge">public static</code> (e.g. Python <code class="language-plaintext highlighter-rouge">def</code>).</li>
          <li>All parameters of a functions must be declared.</li>
        </ul>
      </li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">LargerDemo</span> <span class="o">{</span>
      <span class="cm">/** Returns the larger of x and y. */</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">larger</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
              <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
          <span class="o">}</span>
          <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
      <span class="o">}</span>
    
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">larger</span><span class="o">(</span><span class="mi">8</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
      <span class="o">}</span>
  <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>Class</p>

    <ul>
      <li>
        <p>Examle:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
</pre></td><td class="rouge-code"><pre><span class="cm">/* Dog.java */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>		<span class="c1">// non-static</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">weightInPounds</span><span class="o">;</span>		<span class="c1">// instance variable </span>
        
    <span class="cm">/* One integer constructor for dogs */</span>
    <span class="kd">public</span> <span class="nf">Dog</span><span class="o">(</span><span class="kt">int</span> <span class="n">w</span><span class="o">)</span> <span class="o">{</span>		<span class="c1">// e.g. python def __init__</span>
        <span class="n">weightInPounds</span> <span class="o">=</span> <span class="n">w</span><span class="o">;</span>
    <span class="o">}</span>
        
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeNoise</span><span class="o">()</span> <span class="o">{</span>		<span class="c1">// non-static method </span>
        <span class="k">if</span> <span class="o">(</span><span class="n">weightInPounds</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"yip!"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">weightInPounds</span> <span class="o">&lt;</span> <span class="mi">30</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"bark"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"wooof!"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
    
<span class="cm">/* DogLauncher.java */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DogLauncher</span> <span class="o">{</span>		  <span class="c1">// client of Dog class</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Dog</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">();</span>			<span class="c1">// Declaration a new variable of type Dog</span>
        <span class="n">d</span><span class="o">.</span><span class="na">weightInPounds</span> <span class="o">=</span> <span class="mi">51</span><span class="o">;</span>	<span class="c1">// Instantiation</span>
        <span class="n">d</span><span class="o">.</span><span class="na">makeNoise</span><span class="o">();</span>				 <span class="c1">// Invocation</span>
    <span class="o">}</span>
<span class="o">}</span>
    
<span class="o">&gt;</span> <span class="n">javac</span> <span class="nc">Dog</span><span class="o">.</span><span class="na">java</span>
<span class="o">&gt;</span> <span class="n">javac</span> <span class="nc">DogLauncher</span><span class="o">.</span><span class="na">java</span>
<span class="o">&gt;</span> <span class="n">java</span> <span class="nc">DogLauncher</span>
<span class="n">wooof</span><span class="o">!</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>

        <ul>
          <li>A class that uses another class is sometimes called a ‚Äúclient‚Äù of that class, i.e. <code class="language-plaintext highlighter-rouge">DogLauncher</code> is a client of <code class="language-plaintext highlighter-rouge">Dog</code>.</li>
          <li>Instance variables or non-static variables must be declared inside the class.</li>
          <li>The <code class="language-plaintext highlighter-rouge">makeNoise()</code> is a <strong>non-static / instance</strong> method, and do not have the <code class="language-plaintext highlighter-rouge">static</code> keyword. If the method is going to be invoked by an instance of the class, then it should be non-static. It means, if one method needs to use the instance variable, the method must be non-static.
            <ul>
              <li>To call the <code class="language-plaintext highlighter-rouge">makeNoise</code> method should using the <code class="language-plaintext highlighter-rouge">new</code> keyword to instantiate a <code class="language-plaintext highlighter-rouge">Dog</code>, then call <code class="language-plaintext highlighter-rouge">d.makeNoise()</code>.</li>
            </ul>
          </li>
          <li>The constructor with signature <code class="language-plaintext highlighter-rouge">public Dog(int w)</code> will be invoked anytime that we try to create a <code class="language-plaintext highlighter-rouge">Dog</code> using the <code class="language-plaintext highlighter-rouge">new</code> keyword and a single integer parameter. Similar to Python <code class="language-plaintext highlighter-rouge">__init__</code> method.</li>
        </ul>
      </li>
      <li>
        <p><strong>Non-static</strong> Methods are actions that can be taken only by a specific instance of a class.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nc">Math</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Math</span><span class="o">();</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p><strong>Static</strong> methods are actions that are taken by the class itself.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">x</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p>Non-static:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nc">Dog</span> <span class="nf">maxDog</span><span class="o">(</span><span class="nc">Dog</span> <span class="n">d2</span><span class="o">)</span> <span class="o">{</span>	 <span class="c1">// non-static method</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">weightInPounds</span> <span class="o">&gt;</span> <span class="n">d2</span><span class="o">.</span><span class="na">weightInPounds</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>	<span class="c1">// use the keyword this to refer to the current object</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">d2</span><span class="o">;</span>
<span class="o">}</span>
    
<span class="cm">/* invoke */</span>
<span class="nc">Dog</span> <span class="n">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">15</span><span class="o">);</span>	
<span class="nc">Dog</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
<span class="n">d</span><span class="o">.</span><span class="na">maxDog</span><span class="o">(</span><span class="n">d2</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
      <li>
        <p>Static:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">weightInPounds</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="n">binomen</span> <span class="o">=</span> <span class="s">"Canis familiaris"</span><span class="o">;</span>	<span class="c1">// static variable</span>
    <span class="o">...</span>
<span class="o">}</span>
    
<span class="cm">/* invoke */</span>
<span class="nc">Dog</span><span class="o">.</span><span class="na">binomen</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p>Arrays of objects</p>

<ul>
  <li>use <code class="language-plaintext highlighter-rouge">new</code> keyword to create the array</li>
  <li>use <code class="language-plaintext highlighter-rouge">new</code> again for each object that needs to put in the array</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="cm">/* example 1 */</span>
<span class="nc">Dog</span><span class="o">[]</span> <span class="n">dogs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>		<span class="c1">// Creates an array of Dogs of size 2</span>
<span class="n">dogs</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">8</span><span class="o">);</span>			  <span class="c1">// dog 1 has value of 8 </span>
<span class="n">dogs</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dog</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
<span class="n">dogs</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">makeNoise</span><span class="o">();</span>			  <span class="c1">// dog 1 invoke the method </span>

<span class="cm">/* example 2 */</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">name</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
<span class="n">name</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="n">name</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> 

<span class="cm">/* example 3*/</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">myList</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="2-lists">2. Lists</h1>

<h2 id="21-sllist-singly-linked-list">2.1 SLList (Singly Linked List)</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IntNode</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">item</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">next</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">IntNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="nc">IntNode</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="n">next</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SLList</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">first</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">SLList</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">first</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="cm">/** Adds x to the front of the list. */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">first</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">first</span><span class="o">);</span>
    <span class="o">}</span>
    
  <span class="cm">/** Returns the first item in the list. */</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFirst</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">first</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/* Creates a list of one integer, namely 10 */</span>
      	<span class="nc">SLList</span> <span class="no">L</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SLList</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="no">L</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="no">L</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span>	<span class="c1">// outputs 10</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Public vs. Private</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="cm">/* change public to private */</span>
<span class="kd">private</span> <span class="nc">IntNode</span> <span class="n">first</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Private variables and methods can only be accessed by code inside the same <code class="language-plaintext highlighter-rouge">.java</code> file, e.g. in this case <code class="language-plaintext highlighter-rouge">SLList.java</code>. Other class can not invoke <code class="language-plaintext highlighter-rouge">first</code>. But can through <code class="language-plaintext highlighter-rouge">public</code> methods like <code class="language-plaintext highlighter-rouge">public void addFirst</code> to invoke or edit <code class="language-plaintext highlighter-rouge">first</code>.</p>

<p>Nested Class</p>

<ul>
  <li>Put a class inside of another class. Do not need two java files.</li>
  <li>If the nested class has no need to use any of the instance methods or variables of enclosing class, then can declare with <code class="language-plaintext highlighter-rouge">static</code>. Which means that methods inside of static class can not access any of the members of the enclosing class.</li>
  <li>e.g. <code class="language-plaintext highlighter-rouge">IntNode</code> class is depends on <code class="language-plaintext highlighter-rouge">SLList</code> class, so can put in inside of <code class="language-plaintext highlighter-rouge">SLList</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SLList</span> <span class="o">{</span> 
    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">IntNode</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="kt">int</span> <span class="n">item</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">Node</span> <span class="n">next</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">IntNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="nc">IntNode</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">item</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="n">next</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
  
    <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">first</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">SLList</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">first</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="cm">/** Adds an item to the front of the list */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">first</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">first</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFirst</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">first</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SLList</span> <span class="no">L</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SLList</span><span class="o">(</span><span class="mi">15</span><span class="o">);</span>
        <span class="no">L</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="no">L</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>addLast and size</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="cm">/** Adds an itemto the end of the list. */</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
  <span class="nc">IntNote</span> <span class="n">p</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
  
  <span class="cm">/* Move p until it reaches the end of the list. */</span>
  <span class="k">while</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNote</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="o">}</span>

<span class="cm">/** helper function 
	* Returns the size of the list that starts at IntNode p. */</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">(</span><span class="nc">IntNode</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">size</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">size</span><span class="o">(</span><span class="n">first</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>use <code class="language-plaintext highlighter-rouge">private static</code> for helper function, to define this function can not invoked by outside.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">addLast()</code> is slow. Because we have to start at the front, and loop all the way to the back of our list before adding our element.</p>
  </li>
  <li>
    <p><strong>Sentinel Nodes:</strong></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="cm">/** Creates an empty SLList */</span>
<span class="kd">public</span> <span class="nf">SLList</span><span class="o">(){</span>
  <span class="n">sentinel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
  <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>
  
<span class="kd">public</span> <span class="nf">SLList</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
  <span class="n">sentinel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
  <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
  <span class="n">size</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span> 
  
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">){</span>
  <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
  <span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
  
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFirst</span><span class="o">(){</span>
  <span class="k">return</span> <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
<span class="o">}</span>
  
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="nc">IntNode</span> <span class="n">p</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">;</span>
    
    <span class="k">while</span> <span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="n">p</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IntNode</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>It‚Äôs the first node and it‚Äôs a dummy node, and not contains in the list.</li>
      <li>It can be any number, because it will not be used. Its for <code class="language-plaintext highlighter-rouge">addLast</code>.</li>
      <li>A <code class="language-plaintext highlighter-rouge">SLList</code> with a sentinel node has at least the following invariants:
        <ul>
          <li>The <code class="language-plaintext highlighter-rouge">sentinel</code> reference always points to a sentinel node.</li>
          <li>The front item (if it exists), is always at <code class="language-plaintext highlighter-rouge">sentinel.next.item</code>.</li>
          <li>The <code class="language-plaintext highlighter-rouge">size</code> variable is always the total number of items that have been added.</li>
          <li>Inserting at the back of an SLList is much slower than the front.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="22--dllist-doubly-linked-list">2.2  DLList (Doubly Linked List)</h2>

<p>A node has a pointer to the next and the previous node. There‚Äôs two way to implement it:</p>

<ol>
  <li>
    <p>Double Sentinel: There‚Äôs a Sentinel Node at front and the end. <code class="language-plaintext highlighter-rouge">SentFront.next</code> is points to the first real Node, <code class="language-plaintext highlighter-rouge">prev</code> points to <code class="language-plaintext highlighter-rouge">null</code>. And <code class="language-plaintext highlighter-rouge">SentBack.next</code> points to <code class="language-plaintext highlighter-rouge">null</code>, <code class="language-plaintext highlighter-rouge">prev</code> points to the last real Node.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/double_sentinel.png?raw=true" alt="double_sentinel" style="zoom:50%;" /></p>
  </li>
  <li>
    <p>Circular Sentinel: Only need one Sentinel Node, and this Sentinel Node <code class="language-plaintext highlighter-rouge">next</code> points to the first real Node, <code class="language-plaintext highlighter-rouge">prev</code> points to the last real Node. If there‚Äôs no node, <code class="language-plaintext highlighter-rouge">next</code> and <code class="language-plaintext highlighter-rouge">prev</code> point to itself.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/circular_sentinel.png?raw=true" alt="circular_sentinel" style="zoom:50%;" /></p>
  </li>
</ol>

<p>Generic List: <code class="language-plaintext highlighter-rouge">&lt;PLACEHOLDER&gt;</code> after the class name. This allows the list to work not only for <code class="language-plaintext highlighter-rouge">int</code>, but also for i.e., <code class="language-plaintext highlighter-rouge">string</code> too.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="cm">/** Make a placeholder for this class, so you can declare the type later */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DLList</span><span class="o">&lt;</span><span class="no">HERE</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">IntNode</span> <span class="n">sentinel</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">IntNode</span> <span class="o">{</span>
        <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">prev</span><span class="o">;</span>
        <span class="kd">public</span> <span class="no">HERE</span> <span class="n">item</span><span class="o">;</span>
        <span class="kd">public</span> <span class="nc">IntNode</span> <span class="n">next</span><span class="o">;</span>
        <span class="o">...</span>
    <span class="o">}</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="cm">/** HERE is now Integer, so d1 is a int */</span>
<span class="nc">DLList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DLList</span><span class="o">&lt;&gt;(</span><span class="mi">5</span><span class="o">);</span>
<span class="n">d1</span><span class="o">.</span><span class="na">insertFront</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>

<span class="cm">/** HERE is now String, so d2 is a String */</span>
<span class="nc">DLList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DLList</span><span class="o">&lt;&gt;(</span><span class="s">"hello"</span><span class="o">);</span>
<span class="n">d2</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="s">"world"</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>int: Integer</li>
  <li>double: Double</li>
  <li>char: Character</li>
  <li>boolean: Boolean</li>
  <li>long: Long</li>
</ul>

<h2 id="23--alist-array-list">2.3  AList (Array List)</h2>

<p>There are three valid notations for array creation</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">y = new int[3];</code></li>
  <li><code class="language-plaintext highlighter-rouge">x = new int[]{1, 2, 3, 4, 5};</code></li>
  <li><code class="language-plaintext highlighter-rouge">int[] w = {9, 10, 11, 12, 13};</code></li>
</ul>

<p>2D Array</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kt">int</span><span class="o">[][]</span> <span class="n">pascalsTriangle</span><span class="o">;</span>					<span class="c1">// declaration</span>
<span class="n">pasacalsTriangle</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">4</span><span class="o">][];</span>	<span class="c1">// a 2D array contains four 1D array</span>

<span class="n">pascalsTriangle</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="mi">1</span><span class="o">};</span><span class="c1">// give a value at position 0</span>

<span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">;</span>
<span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">4</span><span class="o">][</span><span class="mi">4</span><span class="o">];</span>					 <span class="c1">// four 2D array contain 5 int 1D array </span>

<span class="cm">/** all togher */</span>
<span class="kt">int</span><span class="o">[][]</span> <span class="n">pascalAgain</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[][]{</span> <span class="o">{</span><span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">},</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">}};</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Alist:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">T</span><span class="o">[]</span> <span class="n">items</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
    
    <span class="cm">/** Creates an empty list */</span>
    <span class="kd">public</span> <span class="nf">AList</span><span class="o">()</span> <span class="o">{</span>
      	<span class="cm">/* Casts, if we want to use &lt;T&gt;: must new a Objetc 
           then transfer the arrys type */</span>
        <span class="n">items</span> <span class="o">=</span> <span class="o">(</span><span class="no">T</span><span class="o">[])</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
        <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
    
  	<span class="cm">/** Resizes the underlying array to the target capacity */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">resize</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">T</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">(</span><span class="no">T</span><span class="o">[])</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="n">capacity</span><span class="o">];</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">items</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
        <span class="n">items</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="cm">/** Inserts X into the back of the list */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="no">T</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="cm">/* Resize items since its full */</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
          <span class="cm">/* faster */</span> 
          <span class="n">resize</span><span class="o">(</span><span class="n">size</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span> 
        <span class="o">}</span>
        <span class="n">items</span><span class="o">[</span><span class="n">size</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">size</span> <span class="o">=</span> <span class="n">size</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="cm">/** Returns the item from the back of the list */</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getLast</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">items</span><span class="o">[</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
    <span class="o">}</span>
    
   	<span class="cm">/** Deletes item from back of the list and returns deleted item */</span>	
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">removeLast</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="n">getLast</span><span class="o">();</span>
      	<span class="cm">/* not necessary */</span>
        <span class="n">items</span><span class="o">[</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>	
        <span class="n">size</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">last</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="24-deque-double-ended-queue">2.4 Deque (Double ended queue)</h2>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/deque.png?raw=true" alt="deque" style="zoom:50%;" /></p>

<p>Specifically, any deque implementation must have exactly the following operations:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">public void addFirst(T item)</code>: Adds an item of type <code class="language-plaintext highlighter-rouge">T</code> to the front of the deque.</li>
  <li><code class="language-plaintext highlighter-rouge">public void addLast(T item)</code>: Adds an item of type <code class="language-plaintext highlighter-rouge">T</code> to the back of the deque.</li>
  <li><code class="language-plaintext highlighter-rouge">public boolean isEmpty()</code>: Returns true if deque is empty, false otherwise.</li>
  <li><code class="language-plaintext highlighter-rouge">public int size()</code>: Returns the number of items in the deque.</li>
  <li><code class="language-plaintext highlighter-rouge">public void printDeque()</code>: Prints the items in the deque from first to last, separated by a space.</li>
  <li><code class="language-plaintext highlighter-rouge">public T removeFirst()</code>: Removes and returns the item at the front of the deque. If no such item exists, returns null.</li>
  <li><code class="language-plaintext highlighter-rouge">public T removeLast()</code>: Removes and returns the item at the back of the deque. If no such item exists, returns null.</li>
  <li><code class="language-plaintext highlighter-rouge">public T get(int index)</code>: Gets the item at the given index, where 0 is the front, 1 is the next item, and so forth. If no such item exists, returns null. Must not alter the deque!</li>
</ul>

<p><strong>Linked List Deque:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
</pre></td><td class="rouge-code"><pre><span class="cm">/* Empty Linked List -&gt; sentinel is a node with value null. */</span>
<span class="kd">public</span> <span class="nf">LinkedListDeque</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">sentinel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;();</span>
    <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">;</span>
    <span class="n">sentinel</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">;</span>
    <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/* Adds an item to the front / back of the deque. */</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="no">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">firstNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;(</span><span class="n">item</span><span class="o">);</span>
  <span class="cm">/* save the next node of sentinel in `next`, which should be pos 1. */</span>
  <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
  <span class="cm">/* copy `next`. */</span>
  <span class="n">firstNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
  <span class="cm">/* points firstNode is the prev node of `next` */</span>
  <span class="n">next</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">firstNode</span><span class="o">;</span>
  <span class="cm">/* relocated the sentinel node */</span>
  <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">firstNode</span><span class="o">;</span>
  <span class="n">firstNode</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">;</span>

  <span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="no">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">lastNode</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;(</span><span class="n">item</span><span class="o">);</span>
    <span class="cm">/* the prev node of the sentinel node points to the last node. */</span>
    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">prev</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>

    <span class="n">lastNode</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
    <span class="n">prev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">lastNode</span><span class="o">;</span>
    <span class="n">sentinel</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">lastNode</span><span class="o">;</span>
    <span class="n">lastNode</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">;</span>

    <span class="n">size</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>

<span class="cm">/* Prints the items in the deque from first to last. */</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">printDeque</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> <span class="n">ptr</span> <span class="o">!=</span> <span class="n">sentinel</span><span class="o">;</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">ptr</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ptr</span><span class="o">.</span><span class="na">item</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="cm">/* Removes and returns the item at the fonrt / back of the deque. */</span>
<span class="kd">public</span> <span class="no">T</span> <span class="nf">removeFirst</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">remove</span><span class="o">(</span><span class="n">sentinel</span><span class="o">.</span><span class="na">next</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="no">T</span> <span class="nf">removeLast</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">remove</span><span class="o">(</span><span class="n">sentinel</span><span class="o">.</span><span class="na">prev</span><span class="o">);</span>
<span class="o">}</span>

<span class="cm">/* The helper function, see the grafic above */</span>
<span class="kd">private</span> <span class="no">T</span> <span class="nf">remove</span><span class="o">(</span><span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">tempNext</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">tempPrev</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">prev</span><span class="o">;</span>

    <span class="n">tempPrev</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">tempNext</span><span class="o">;</span>
    <span class="n">tempNext</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">tempPrev</span><span class="o">;</span>
    <span class="n">size</span><span class="o">--;</span>

    <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">item</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Array Deque:</strong></p>

<ul>
  <li>
    <p>uses a circular array with two pointers head and tail. They both start at the same position, then the head pointer starts from back to front and the tail pointer from front to the end. If they meet again (head equals tail) it means the array is full.</p>
  </li>
  <li>
    <p>Null is not allowed to add into the ArrayDeque.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">addFirst()</code>:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="no">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">item</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
  <span class="o">}</span>
  
  <span class="n">head</span> <span class="o">=</span> <span class="o">(</span><span class="n">head</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">%</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
  <span class="n">elements</span><span class="o">[</span><span class="n">head</span><span class="o">]</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span>
  <span class="n">size</span><span class="o">++;</span>
  
  <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="n">tail</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">calculateSize</span><span class="o">(</span><span class="n">size</span> <span class="o">*</span> <span class="no">GROWTH_FACTOR</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>Two pointer should move like circle. The different is that the <code class="language-plaintext highlighter-rouge">head</code> pointer moves backward (from index 0 to the end n then n-1, n-2 and so on), e.g. if <code class="language-plaintext highlighter-rouge">element.length = 4</code> and <code class="language-plaintext highlighter-rouge">head = 0 </code>then <code class="language-plaintext highlighter-rouge">3 % 4 = 3</code>, so item adds on index <code class="language-plaintext highlighter-rouge">3</code>.</li>
      <li>If the array is full, it should double its size.</li>
    </ul>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/addfirst.jpeg?raw=true" alt="deque" style="zoom:100%;" /></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">addLast():</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="no">T</span> <span class="n">item</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">item</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>
  <span class="o">}</span>
  
  <span class="n">elements</span><span class="o">[</span><span class="n">tail</span><span class="o">]</span> <span class="o">=</span> <span class="n">item</span><span class="o">;</span>
  <span class="n">tail</span> <span class="o">=</span> <span class="o">(</span><span class="n">tail</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
  <span class="n">size</span><span class="o">++;</span>
  
  <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="n">tail</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">calculateSize</span><span class="o">(</span><span class="n">size</span> <span class="o">*</span> <span class="no">GROWTH_FACTOR</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>The <code class="language-plaintext highlighter-rouge">tail</code> pointer moves forward (from 0 to 1 to 2 and so on).</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">removeFirst()</code>:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="no">T</span> <span class="nf">removeFirst</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="no">T</span> <span class="n">item</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="n">head</span><span class="o">];</span>
  
    <span class="n">elements</span><span class="o">[</span><span class="n">head</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
  
    <span class="n">head</span> <span class="o">=</span> <span class="o">(</span><span class="n">head</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="n">size</span><span class="o">--;</span>
  
    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="no">INITIAL_LENGTH</span> <span class="o">&amp;&amp;</span> <span class="n">size</span> <span class="o">&lt;</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">/</span> 				 <span class="no">DOWN_USAGE_FACTOR</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">calculateSize</span><span class="o">(</span><span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">/</span> <span class="no">GROWTH_FACTOR</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">item</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>First set the head pointer‚Äôs value as null then head should move circular forward (because the addFirst was backward).</li>
      <li>If after remove the value the array size is too big ((the number of elements / the array‚Äôs length) &lt; usage Factor), the array should reduce to save the memory.</li>
    </ul>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/removefirst.jpeg?raw=true" alt="deque" style="zoom:100%;" /></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">removeLast()</code>:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="no">T</span> <span class="nf">removeLast</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="n">tail</span> <span class="o">=</span> <span class="o">((</span><span class="n">tail</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">%</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
  
    <span class="no">T</span> <span class="n">item</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="n">tail</span><span class="o">];</span>
  
    <span class="n">elements</span><span class="o">[</span><span class="n">tail</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="n">size</span><span class="o">--;</span>
  
    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="no">INITIAL_LENGTH</span> <span class="o">&amp;&amp;</span> <span class="n">size</span> <span class="o">&lt;</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">/</span> <span class="no">DOWN_USAGE_FACTOR</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">calculateSize</span><span class="o">(</span><span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">/</span> <span class="no">GROWTH_FACTOR</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">item</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>First move the tail pointer backward (the addLast was forward), because the value of last item stored at the previous index of the tail pointer. Then set the value as null.</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">calculateSize()</code>:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="kt">void</span> <span class="nf">calculateSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">newSize</span><span class="o">)</span> <span class="o">{</span>
    <span class="no">T</span><span class="o">[]</span> <span class="n">resized</span> <span class="o">=</span> <span class="o">(</span><span class="no">T</span><span class="o">[])</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="n">newSize</span><span class="o">];</span>
    <span class="cm">/* V1 */</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">src</span> <span class="o">=</span> <span class="o">(</span><span class="n">head</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span> <span class="o">%</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">dest</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="n">resized</span><span class="o">[</span><span class="n">dest</span><span class="o">]</span> <span class="o">=</span> <span class="n">elements</span><span class="o">[</span><span class="n">src</span><span class="o">];</span>
    <span class="o">}</span>
  
    <span class="cm">/* V2 */</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">size</span> <span class="o">+</span> <span class="n">head</span> <span class="o">&lt;</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">head</span><span class="o">,</span> <span class="n">resized</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="cm">/* Copy left side items of the head pointer. */</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="n">head</span><span class="o">,</span> <span class="n">resized</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">head</span><span class="o">);</span>
        <span class="cm">/* Copy right side items of the head pointer. */</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">elements</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">resized</span><span class="o">,</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">head</span><span class="o">,</span> <span class="n">head</span><span class="o">);</span>
    <span class="o">}</span>
  
    <span class="n">elements</span> <span class="o">=</span> <span class="n">resized</span><span class="o">;</span>
    <span class="n">head</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="n">tail</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/changecap.jpeg?raw=true" alt="deque" style="zoom:100%;" /></p>

    <ul>
      <li>If the array is full, it should double its size. If the usage factor is too low, it should reduce its size. There‚Äôs two way to implementate this.</li>
    </ul>

    <ol>
      <li>Uses <code class="language-plaintext highlighter-rouge">for</code> loop to copy the array into the new array with new size. It can avoid to adds nulls. Similar to the <code class="language-plaintext highlighter-rouge">get()</code>, simply copy all items after <code class="language-plaintext highlighter-rouge">head</code>.</li>
      <li>Uses <code class="language-plaintext highlighter-rouge">System.arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>. There‚Äôs two situations:
        <ol>
          <li>if <code class="language-plaintext highlighter-rouge">size + head &lt; elements.length</code>: the number of items plus the index of the head is still less than the length of the array, it means there‚Äôs nulls on the left side of the head. In this case it should only copy the right side of the head.</li>
          <li>Otherwise, just copy the items on the left and right sides of the head pointer separately.</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">get()</code>:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="no">T</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">index</span> <span class="o">&gt;</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="kt">int</span> <span class="n">theIndex</span> <span class="o">=</span> <span class="o">(</span><span class="n">head</span> <span class="o">+</span> <span class="n">index</span><span class="o">)</span> <span class="o">%</span> <span class="n">elements</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="k">return</span> <span class="n">elements</span><span class="o">[</span><span class="n">theIndex</span><span class="o">];</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>The input <code class="language-plaintext highlighter-rouge">index</code> is not the ‚Äúreal‚Äù index, because the head pointer is where the array starts, so the <code class="language-plaintext highlighter-rouge">head</code> is our index <code class="language-plaintext highlighter-rouge">0</code>. It means the real index is after the head which is <code class="language-plaintext highlighter-rouge">(head+inde)</code>.</li>
    </ul>
  </li>
</ul>

<h2 id="25-built-in-list">2.5 Built-in List</h2>

<p>Lists:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Example</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="no">L</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="no">L</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="no">L</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">L</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Sets:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>

<span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="n">s</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Tokyo"</span><span class="o">);</span>
<span class="n">s</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Lagos"</span><span class="o">);</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">S</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"Tokyo"</span><span class="o">));</span> <span class="c1">// true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="3-testing">3. Testing</h1>

<p><strong>Ad Hoc Testing</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="cm">/** Tests the Sort class. */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestSort</span> <span class="o">{</span>
    <span class="cm">/** Tests the sort method of the Sort class. */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testSort</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="o">{</span><span class="s">"i"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">expected</span> <span class="o">=</span> <span class="o">{</span><span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"i"</span><span class="o">};</span>
      
        <span class="nc">Sort</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
      
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">expected</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Mismatch in position "</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">", 
                                   expected: "</span> <span class="o">+</span> <span class="n">expected</span> <span class="o">+</span> <span class="s">", but got: "</span> <span class="o">+</span>
                                   <span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">"."</span><span class="o">);</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">testSort</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>JUnit Testing</strong></p>

<ul>
  <li>Precede each method with <code class="language-plaintext highlighter-rouge">@org.junit.Test</code> (no semi-colon).</li>
  <li>Change each test method to be <strong>non</strong>-static.</li>
  <li>Remove our <code class="language-plaintext highlighter-rouge">main</code> method from the <code class="language-plaintext highlighter-rouge">TestSort</code> class.</li>
  <li>Run the Code: Run -&gt; Run‚Ä¶</li>
  <li><code class="language-plaintext highlighter-rouge">import org.junit.Test;</code> -&gt; simply use <code class="language-plaintext highlighter-rouge">@Test</code></li>
  <li><code class="language-plaintext highlighter-rouge">import static org.junit.Assert.*;</code> -&gt; <code class="language-plaintext highlighter-rouge">assertEquals(&lt;expected&gt;, &lt;actual&gt;)</code></li>
  <li>default renderer: red/green arrows</li>
</ul>

<p>jh61b renderer: white/blue boxes</p>
<ul>
  <li>See ‚ÄúSelection Sort‚Äù</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">testSort</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="o">{</span><span class="s">"i"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>
    <span class="nc">String</span><span class="o">[]</span> <span class="n">expected</span> <span class="o">=</span> <span class="o">{</span><span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"i"</span><span class="o">};</span>
    <span class="nc">Sort</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
  	<span class="cm">/* Use `org.junit` library */</span>
    <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertArrayEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">input</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Selection Sort</p>

<ol>
  <li>Find the smallest item.</li>
  <li>Move it to the front.</li>
  <li>Selection sort the remaining N-1 items (without touching the front item).</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="rouge-code"><pre><span class="cm">/* Sort Class */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sort</span> <span class="o">{</span>
    <span class="cm">/** Sorts strings destructively. */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span> 
       <span class="cm">/* selection sort the rest (using recursion by helper methods) */</span>
			<span class="n">sort</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
  
  	<span class="cm">/** Sorts strings destructively starting from item start. */</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span> 
       <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">{</span>
           <span class="k">return</span><span class="o">;</span>
       <span class="o">}</span>
       <span class="cm">/* find the smallest item */</span>
   		<span class="kt">int</span> <span class="n">smallestIndex</span> <span class="o">=</span> <span class="n">findSmallest</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">start</span><span class="o">);</span>
       <span class="cm">/* move it to the front */</span>
       <span class="n">swap</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">smallestIndex</span><span class="o">);</span>
       <span class="n">sort</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

  	<span class="cm">/** Swap item a with b */</span>
  	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">a</span><span class="o">];</span>
        <span class="n">x</span><span class="o">[</span><span class="n">a</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">b</span><span class="o">];</span>
        <span class="n">x</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
		<span class="o">}</span>
  
    <span class="cm">/** Returns the smallest string in x. */</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findSmallest</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">smallestIndex</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">compareTo</span><span class="o">(</span><span class="n">x</span><span class="o">[</span><span class="n">smallestIndex</span><span class="o">]);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">smallestIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">smallestIndex</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.*;</span>

<span class="cm">/* TestSort Class */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestSort</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="cm">/** Test the Sort.findSmallest method. */</span>
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFindSmallest</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="o">{</span><span class="s">"i"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">expected</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">actual</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">findSmallest</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="cm">/* org.junit.Assert.assertEquals(expected, actual); */</span>  
      	<span class="n">assertEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">actual</span><span class="o">);</span> 

        <span class="nc">String</span><span class="o">[]</span> <span class="n">input2</span> <span class="o">=</span> <span class="o">{</span><span class="s">"there"</span><span class="o">,</span> <span class="s">"are"</span><span class="o">,</span> <span class="s">"many"</span><span class="o">,</span> <span class="s">"pigs"</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">expected2</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">actual2</span> <span class="o">=</span> <span class="nc">Sort</span><span class="o">.</span><span class="na">findSmallest</span><span class="o">(</span><span class="n">input2</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="cm">/* org.junit.Assert.assertEquals(expected2, actual2); */</span>
      	<span class="n">assertEquals</span><span class="o">(</span><span class="n">expected2</span><span class="o">,</span> <span class="n">actual2</span><span class="o">);</span>
    <span class="o">}</span>
  
    <span class="cm">/** Test the Sort.swap method. */</span>
  	<span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSwap</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="o">{</span><span class="s">"i"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"an"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">expected</span> <span class="o">=</span> <span class="o">{</span><span class="s">"an"</span><span class="o">,</span> <span class="s">"have"</span><span class="o">,</span> <span class="s">"i"</span><span class="o">,</span> <span class="s">"egg"</span><span class="o">};</span>

        <span class="nc">Sort</span><span class="o">.</span><span class="na">swap</span><span class="o">(</span><span class="n">input</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
        <span class="cm">/* org.junit.Assert.assertArrayEquals(expected, input); */</span>
      	<span class="n">assertArrayEquals</span><span class="o">(</span><span class="n">expected</span><span class="o">,</span> <span class="n">input</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">of</code> method: for example, to create an <code class="language-plaintext highlighter-rouge">IntList</code> containing the numbers 0, 1, 2, and 3, we could use the method as follows:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nc">IntList</span> <span class="n">myList</span> <span class="o">=</span> <span class="nc">IntList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
<span class="c1">// Creates the IntList 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; null</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">myList.first</code> returns 0</li>
  <li><code class="language-plaintext highlighter-rouge">myList.rest</code> returns 1 -&gt; 2 -&gt; 3 -&gt; null</li>
  <li><code class="language-plaintext highlighter-rouge">myList.rest.rest.rest</code> returns 3 -&gt; null</li>
  <li><code class="language-plaintext highlighter-rouge">myList.rest.rest.rest.rest</code> returns null</li>
</ul>

<p>Style Checker: right Klic at the .java in IDEA - Checking Style</p>

<h1 id="4-inheritance">4. Inheritance</h1>

<h2 id="41-intro-and-interfaces">4.1 Intro and Interfaces</h2>

<p><strong>Method Overloading:</strong> Java allows multiple methods with same name, but different parameters.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">longest</span><span class="o">(</span><span class="nc">SLList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">longest</span><span class="o">(</span><span class="nc">AList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>When you call <code class="language-plaintext highlighter-rouge">WordUtils.longest</code>, Java knows which one to run according to what kind of parameter you supply it. If you supply it with an AList, it will call the AList method. Same with an SLList.</li>
</ul>

<p><strong>Interface Inheritance:</strong> is a specification of what a List is able to do (methods and parameters), not how to do. The subclass must have all methods of the interface. Use the keyword <code class="language-plaintext highlighter-rouge">interface</code>.</p>

<ul>
  <li>Step 1:</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">List61B</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">voif</span> <span class="nf">addLast</span><span class="o">(</span><span class="no">T</span> <span class="n">x</span><span class="o">);</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getLast</span><span class="o">();</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">();</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">removeLast</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="no">T</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">position</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="no">T</span> <span class="n">x</span><span class="o">);</span>
    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getFirst</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>Step 2: use the keyword <code class="language-plaintext highlighter-rouge">implements</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AList</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">List61B</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="no">T</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The qualities of interfaces:</p>
<ul>
  <li>All methods must be public.</li>
  <li>All variables must be public static final.</li>
  <li>Cannot be instantiated</li>
  <li>All methods are by default abstract unless specified to be <code class="language-plaintext highlighter-rouge">default</code></li>
  <li>Can implement more than one interface per class</li>
</ul>

<p><strong>Overriding and Overloading:</strong></p>

<ul>
  <li>
    <p>Override: a subclass has a method with the exact same signature as in the superclass</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Animal</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeNoise</span><span class="o">();</span>
<span class="o">}</span>
  
<span class="cm">/** Pig overrides makeNoise() */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pig</span> <span class="kd">implements</span> <span class="nc">Animal</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeNoise</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"oink"</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>Overload: a subclass has a method with the same name but different signatures as in the superclass</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="cm">/** makeNoise is overloaded */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">implements</span> <span class="nc">Animal</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeNoise</span><span class="o">(</span><span class="nc">Dog</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
		<span class="o">...</span>
	<span class="o">}</span>
<span class="o">}</span>
  
<span class="cm">/** absis overloaded */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Math</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">abs</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">abs</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">)</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>use <code class="language-plaintext highlighter-rouge">@Override</code> tag at the top for all methods that been overrided.</p>
  </li>
  <li>
    <p><strong>Implementation Inheritance:</strong> tells the subclasses how they should behave. Subclasses can inherit signatures and implementation. You must include the <code class="language-plaintext highlighter-rouge">default</code> keyword in the method signature.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">List61B</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="k">default</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">();</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <p>For an <code class="language-plaintext highlighter-rouge">SLList</code>, the <code class="language-plaintext highlighter-rouge">get</code> method needs to jump through the entirety of the list. during each call. It‚Äôs much better to just override the <code class="language-plaintext highlighter-rouge">print</code> method.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Node</span> <span class="n">p</span> <span class="o">=</span> <span class="n">sentinel</span><span class="o">.</span><span class="na">next</span><span class="o">;</span> <span class="n">p</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">item</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p><strong>Extends:</strong> uses the <code class="language-plaintext highlighter-rouge">extends</code> keyword to inherit a class not interface, this defines ‚Äúis-a‚Äù relationship. Subclasses inherit all <strong>members</strong> of the parent class. ‚ÄúMembers‚Äù includes: all instance and static variables, all methods and all nested classes.</p>

<ul>
  <li>
    <p>Note that <strong>constructors</strong> are not inherited, and <strong>private</strong> members cannot be directly accessed by subclasses.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RotatingSLList</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">SLList</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="cm">/** Rotates list to the right. */</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">rotateRight</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Item</span> <span class="n">x</span> <span class="o">=</span> <span class="n">removeLast</span><span class="o">();</span>
    <span class="n">addFirst</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>If we want to <strong>override</strong> a method and call this method defined in the parent class, using the <code class="language-plaintext highlighter-rouge">super</code> keyword. e.g. <code class="language-plaintext highlighter-rouge">removeLast</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VengefulSLList</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">SLList</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">SLList</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="n">deletedItems</span><span class="o">;</span>
  
    <span class="kd">public</span> <span class="nf">VengefulSLList</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">deletedItems</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SLList</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;();</span>
    <span class="o">}</span>
  
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Item</span> <span class="nf">removeLast</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Item</span> <span class="n">x</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>	<span class="c1">// Using super keyword</span>
        <span class="n">deletedItems</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="cm">/** Prints deleted items. */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printLostItems</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">deletedItems</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p><strong>Constructors Are Not Inherited</strong>: Uses the <code class="language-plaintext highlighter-rouge">super</code> keyword to call parent‚Äôs constructor.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="nf">VengefulSLList</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">();</span>
    <span class="n">deletedItems</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SLList</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>Adding <code class="language-plaintext highlighter-rouge">super()</code> has no difference from the constructor before (Line 4 to 6). And <code class="language-plaintext highlighter-rouge">super()</code> will implicit call to the default constructor, so it must call the constructor explict e.g. <code class="language-plaintext highlighter-rouge">super(x)</code>.</li>
</ul>

<p><strong>Higher Order Functions:</strong></p>

<ul>
  <li>In old school Java (Java 7 and earlier), memory boxes (variables) could not contain pointers to functions. To get around this we can take advantage of interface inheritance.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="cm">/** Reprensent a function that takes in an integer and returns an integer */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IntUnaryFunction</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">apply</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TenX</span> <span class="kd">implements</span> <span class="nc">IntUnaryFunction</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">apply</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">x</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="cm">/** Demonstrates higher order functions in java */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HofDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">do_twice</span><span class="o">(</span><span class="nc">IntUnaryFunction</span> <span class="n">f</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">f</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">x</span><span class="o">));</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">IntUnaryFunction</span> <span class="n">tenX</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TenX</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">do_twice</span><span class="o">(</span><span class="n">tenX</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="42-polymorphism">4.2 Polymorphism</h2>

<p><strong>Polymorphism</strong> refers to how objects can have many forms or types. In object-oriented programming, polymorphism relates to how an object can be regarded as an instance of its own class, an instance of its superclass, an instance of its superclass‚Äôs superclass, and so on.</p>

<p>We can create an <strong>interface</strong> that guarantees that any implementing class, like Dog, contains a comparison method, which we‚Äôll call <code class="language-plaintext highlighter-rouge">compareTo</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="nc">OurComparable</span> <span class="nf">max</span><span class="o">(</span><span class="nc">OurComparable</span><span class="o">[]</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">maxDex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">compareTo</span><span class="o">(</span><span class="n">items</span><span class="o">[</span><span class="n">maxDex</span><span class="o">]);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">maxDex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">items</span><span class="o">[</span><span class="n">maxDex</span><span class="o">];</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OurComparable</span> <span class="o">{</span>
  
    <span class="cm">/** 
    	* Return negative number if this &lt; o
      * Return 0 if this equals o
   	  * Return positive number if this &gt; o
   	  */</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">implements</span> <span class="nc">OurComparable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nf">Dog</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="n">size</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">bark</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">" says: bark"</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="cm">/** the interface */</span> 
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Dog</span> <span class="n">uddaDog</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Dog</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">-</span> <span class="n">uddaDog</span><span class="o">.</span><span class="na">size</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>By declaring that it <code class="language-plaintext highlighter-rouge">implements OurComparable</code>, the Dog class makes a claim that it ‚Äúis-an‚Äù OurComparable. As a result, the compiler checks that this claim is actually true, but sees that Dog <strong>doesn‚Äôt</strong> implement <code class="language-plaintext highlighter-rouge">compareTo</code>. The solution is to use the built-in interface <code class="language-plaintext highlighter-rouge">Comparable&lt;T&gt;</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="no">T</span> <span class="n">obj</span><span class="o">);</span>  
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Dog</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="cm">/** Avoid cast an object */</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Dog</span> <span class="n">uddaDog</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">-</span> <span class="n">uddaDog</span><span class="o">.</span><span class="na">size</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Comparator</strong>: use <code class="language-plaintext highlighter-rouge">java.util.Comparator</code> to define how two objects compare, e.g. by their name.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="no">T</span> <span class="n">o1</span><span class="o">,</span> <span class="no">T</span> <span class="n">o2</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="43-abstract-class">4.3 Abstract Class</h2>

<p>The three most important Abstract data type (ADTs) come in the java.util library:</p>

<ul>
  <li>
    <p><strong>List</strong>: an ordered collection of items, e.g. Linked List, ArrayList</p>
  </li>
  <li>
    <p><strong>Set</strong>: an unordered collection of strictly unique items (no repeats), e.g. HashSet, TreeSet</p>
  </li>
  <li>
    <p><strong>Map</strong>: a collection of key/value pairs like dictionary in python. You access the value via the key, e.g. HashMap, TreeMap</p>
  </li>
</ul>

<p>Abstract Classes:</p>

<ul>
  <li>Use the keyword <code class="language-plaintext highlighter-rouge">abstract</code>.</li>
  <li>Subclass use the keyword <code class="language-plaintext highlighter-rouge">extends</code> and can only extend one abstract class.</li>
  <li>Can do anything an interface can do and more.</li>
  <li>Methods can be public or private</li>
  <li>Can have any types of variables</li>
  <li>Cannot be instantiated</li>
  <li>Methods are by default concrete unless specified to be <code class="language-plaintext highlighter-rouge">abstract</code></li>
  <li>Can only implement one per class</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">GraphicObject</span> <span class="o">{</span>    
  <span class="kd">public</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">;</span>    
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">moveTo</span><span class="o">(</span><span class="kt">int</span> <span class="n">newX</span><span class="o">,</span> <span class="kt">int</span> <span class="n">newY</span><span class="o">)</span> <span class="o">{...}</span>    
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">draw</span><span class="o">();</span> 
<span class="o">}</span> 
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="44-pakages">4.4 Pakages</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="n">package_name</span><span class="o">.</span><span class="na">classname</span><span class="o">.</span><span class="na">subclassname</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">package_name</span><span class="o">.</span><span class="na">classname</span><span class="o">.</span><span class="na">subclassname</span><span class="o">();</span>

<span class="kn">import</span> <span class="nn">package_name.classname.subclassname</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="5-java-syntax">5. Java Syntax</h1>

<h2 id="51-autoboxing--auto-unboxing">5.1 Autoboxing &amp; Auto-unboxing</h2>

<p>Autoboxing is the Java‚Äôs automatic conversion of between wrappers (Integer) to primitives (int).</p>

<p>Automatic Conversions:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BasicArrayList</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="no">L</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
        <span class="no">L</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>   					<span class="c1">// normally should be: L.add(new Integer(5))</span>
        <span class="kt">int</span> <span class="n">first</span> <span class="o">=</span> <span class="no">L</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>  <span class="c1">// normally should be: L.get(0).valueOf();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>If Java code expects a wrapper type (e.g. <code class="language-plaintext highlighter-rouge">Integer</code>) and gets a primitive, it is auto boxed.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">blah</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
<span class="o">}</span>

<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="n">blah</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Likewise, if the code expects a primitive (e.g. <code class="language-plaintext highlighter-rouge">int</code>) and gets a wrapper, it is unboxed.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">blahPrimitive</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
<span class="o">}</span>

<span class="nc">Integer</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
<span class="n">blahPrimitive</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>There are a few things to keep in mind when it comes to autoboxing and unboxing:</p>

<ul>
  <li>Arrays are never autoboxes or auto-unboxed, e.g. if you have an array of integers <code class="language-plaintext highlighter-rouge">int[] x</code>, and try to put its address into a variable of type <code class="language-plaintext highlighter-rouge">Integer[]</code>, the compiler will <strong>not</strong> allow your program to compile.</li>
  <li>Autoboxing and unboxing also has a measurable performance impact. That is, code that relies on autoboxing and unboxing will be slower than code that eschews such automatic conversions.</li>
  <li>Additionally, wrapper types use much more memory than primitive types. On most modern comptuers, not only must your code hold a 64 bit reference to the object, but every object also requires 64 bits of overhead used to store things like the dynamic type of the object.</li>
</ul>

<h2 id="52-immutability">5.2 Immutability</h2>

<p>An immutable data type is a data type whose instances cannot change in any observable way after instantiation. The <code class="language-plaintext highlighter-rouge">final</code> keyword will help the compiler ensure immutability.</p>

<p>Declaring a reference as <strong>final</strong> does not make the object that reference is pointing to immutable! For example, consider the following code snippet:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">final</span> <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">deque</code> variable is final and can never be reassigned, but the array deque object its pointing to can change! ArrayDeques are always mutable!</p>

<h2 id="53-exception">5.3 Exception</h2>

<p>e.g. If the value at <code class="language-plaintext highlighter-rouge">items[i]</code> is null, then we are calling <code class="language-plaintext highlighter-rouge">null.equals(x)</code> -&gt; NullPointerException. In Java, Exceptions are objects and we throw exceptions explicit using the following format:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">throw</span> <span class="k">new</span> <span class="nc">ExceptionObject</span><span class="o">(</span><span class="n">parameter1</span><span class="o">,</span> <span class="o">...);</span>
  
  <span class="c1">// e.g.</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="54-iteration">5.4 Iteration</h2>

<p>Enhanced For Loop, its like <code class="language-plaintext highlighter-rouge">for ‚Ä¶ in</code> from Python.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="n">s</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Tokyo"</span><span class="o">);</span>
<span class="n">s</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Lagos"</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">city</span> <span class="o">:</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">city</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Iterator: to run the code below, be sure that</p>

<ol>
  <li>the List interface has an <code class="language-plaintext highlighter-rouge">iterator()</code> method, since <code class="language-plaintext highlighter-rouge">friends</code> is a List, on which <code class="language-plaintext highlighter-rouge">iterator()</code> is called.</li>
  <li>And the Iterator interface has <code class="language-plaintext highlighter-rouge">next/hasNext()</code> methods, since <code class="language-plaintext highlighter-rouge">seer</code> is an Iterator, on which <code class="language-plaintext highlighter-rouge">hasNext()</code> and <code class="language-plaintext highlighter-rouge">next()</code> are called.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">friends</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
<span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">seer</span> <span class="o">=</span> <span class="n">friends</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>

<span class="k">while</span> <span class="o">(</span><span class="n">seer</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">seer</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>To implement these requirements, the <code class="language-plaintext highlighter-rouge">List&lt;T&gt;</code> interface extends the <code class="language-plaintext highlighter-rouge">Iterable</code> interface, inheriting the abstract <code class="language-plaintext highlighter-rouge">iterator()</code> method. Then check that Iterators have <code class="language-plaintext highlighter-rouge">hasNext()</code> and <code class="language-plaintext highlighter-rouge">next()</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1">// 1.</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">Iterator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;{</span>
    <span class="o">...</span>
<span class="o">}</span>

<span class="c1">// 2.</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">();</span>
    <span class="no">T</span> <span class="nf">next</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="55-packages-and-jar-files">5.5 Packages and JAR files</h2>

<p>A package is a namespace that organises classes and interfaces.Package name starts with website address, backwards, e.g. com.microsoft.xxx.</p>

<p>Creating a Package in IntelliJ: File ‚Üí New Package ‚Üí Choose package name ‚Üí Right click package name ‚Üí select New ‚Üí Java Class ‚Üí Name your class, and IntelliJ will automatically put it in the correct folder + add the ‚Äúpackage com.microsoft.xxx‚Äù declaration for you.</p>

<p>Any Java class without an explicit package name at the top of the file is automatically considered to be part of the ‚Äúdefault‚Äù package.</p>

<p><strong>JAR:</strong> .jar file ‚Äúzip‚Äù all the all .class files. JAR files are just like zip files.</p>

<ul>
  <li>Creating a JAR file in INtelliJ:
    <ol>
      <li>Go to File ‚Üí Project Structure ‚Üí Artifacts ‚Üí JAR ‚Üí ‚ÄúFrom modules with dependencies‚Äù</li>
      <li>Click OK a couple of times</li>
      <li>Click Build ‚Üí Build Artifacts (this will create a JAR file in a folder called ‚ÄúArtifacts‚Äù)</li>
      <li>Distribute this JAR file to other Java programmers, who can now import it into IntelliJ (or otherwise)</li>
    </ol>
  </li>
</ul>

<p>Build Systems: to avoid the need to import a bunch of libraries. Popular build systems include: Ant, Maven, Gradle.</p>

<h2 id="56-access-control">5.6 Access Control</h2>

<table>
  <thead>
    <tr>
      <th>Modifier</th>
      <th>Class</th>
      <th>Package</th>
      <th>Subclass</th>
      <th>World</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>public</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
    </tr>
    <tr>
      <td>protected</td>
      <td>Y</td>
      <td>Y</td>
      <td>Y</td>
      <td>N</td>
    </tr>
    <tr>
      <td>¬†</td>
      <td>Y</td>
      <td>Y</td>
      <td>N</td>
      <td>N</td>
    </tr>
    <tr>
      <td>private</td>
      <td>Y</td>
      <td>N</td>
      <td>N</td>
      <td>N</td>
    </tr>
  </tbody>
</table>

<p><strong>Package Private:</strong> This is the default access given to Java members if there is no explicit modifier written. Package private entails that classes that belong in the same package can access, but not subclasses!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">package</span> <span class="nn">universe</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BlackHole</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Object</span> <span class="n">x</span><span class="o">);</span> <span class="c1">// this method is public, not package-private!</span>
<span class="o">}</span>

<span class="kn">package</span> <span class="nn">universe</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CreationUtils</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">BlackHole</span> <span class="nf">hirsute</span><span class="o">()</span> <span class="o">{</span>
         <span class="k">return</span> <span class="k">new</span> <span class="nf">HasHair</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kn">package</span> <span class="nn">universe</span><span class="o">;</span>
<span class="kd">class</span> <span class="nc">HasHair</span> <span class="kd">implements</span> <span class="nc">BlackHole</span> <span class="o">{</span>
    <span class="nc">Object</span><span class="o">[]</span> <span class="n">items</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="nc">CreationUtils</span><span class="o">.</span><span class="na">hirsute</span><span class="o">;</span>
<span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>
   <span class="kt">void</span> <span class="nf">demoAccess</span><span class="o">()</span> <span class="o">{</span>
      <span class="nc">BlackHole</span> <span class="n">b</span> <span class="o">=</span> <span class="n">hirsute</span><span class="o">();</span>
      <span class="n">b</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"horse"</span><span class="o">);</span>
      <span class="n">b</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
      <span class="nc">HasHair</span> <span class="n">hb</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HasHair</span><span class="o">)</span> <span class="n">b</span><span class="o">;</span>
   <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">b.get(0)</code>: This line errors because <code class="language-plaintext highlighter-rouge">b</code> is of static type <code class="language-plaintext highlighter-rouge">BlackHole</code>, but the <code class="language-plaintext highlighter-rouge">BlackHole</code> interface does not define a <code class="language-plaintext highlighter-rouge">get</code> method! Even though that <code class="language-plaintext highlighter-rouge">b</code> is dynamically a <code class="language-plaintext highlighter-rouge">HasHair</code>, and thus has the <code class="language-plaintext highlighter-rouge">get</code> method, the compiler bases its checks off the static type.</li>
  <li><code class="language-plaintext highlighter-rouge">HasHair hb = (HasHair) b</code>: the <code class="language-plaintext highlighter-rouge">HasHair</code> class doesn‚Äôt have access modifier, so is not a public class - it‚Äôs package-private. This means that <code class="language-plaintext highlighter-rouge">Client</code>, a class outside of the <code class="language-plaintext highlighter-rouge">universe</code> package, can‚Äôt see that the <code class="language-plaintext highlighter-rouge">HasHair</code> class exists.</li>
  <li><code class="language-plaintext highlighter-rouge">equals(Object obj):</code> To determine if two objects have the same value, use <code class="language-plaintext highlighter-rouge">equals()</code>, while <code class="language-plaintext highlighter-rouge">==</code> is used to check if two objects are the same object. Note: The default implementation of <code class="language-plaintext highlighter-rouge">equals()</code> is <code class="language-plaintext highlighter-rouge">==</code>, so you need to override <code class="language-plaintext highlighter-rouge">equals()</code> yourself, e.g. proj2.byog.Core.Game.java: <code class="language-plaintext highlighter-rouge">processKey()</code> - Gold Points - Check the position of the door.</li>
</ul>

<h1 id="6-tree">6. Tree</h1>

<h2 id="61-asymptotics">6.1 Asymptotics</h2>

<p><strong>Time complexity</strong>: How much time does it take for your program to execute?</p>

<ul>
  <li>For N $\ge$ 100,000: $n$ ‚Äì $n\log_2n$ ‚Äì $n^2$ ‚Äì $n^3$ ‚Äì $2^n$ ‚Äì $n!$</li>
  <li>Note that log is really fast.</li>
</ul>

<p><strong>Space complexity</strong>: How much memory does your program require?</p>

<p>Simplified Analysis Process</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="no">A</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">)</span>
   <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">)</span>
      <span class="k">if</span> <span class="o">(</span><span class="no">A</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="no">A</span><span class="o">[</span><span class="n">j</span><span class="o">])</span>
         <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Worst case number of <code class="language-plaintext highlighter-rouge">==</code> operations: $C=1+2+3+\dots+(N-3)+(N-2)+(N-1)=N(N-1)/2$. Which means the worst case order of growth of runtime is $\Theta(N^2)$.</p>

<p>Order of Growth</p>
<ul>
  <li>Big-Theta Notation: $R(N)\in\Theta(f(N))$. ‚Äúequals‚Äù to $f(N)$.</li>
  <li>Big O Notation: $R(N)\in O(f(N))$. ‚ÄúLess than or equal‚Äù to $f(N)$.</li>
  <li>Big Omega Notation: $R(N)\in\Omega(f(N))$. ‚ÄúMore than or equal‚Äù to $f(N)$.</li>
</ul>

<p>Merge Sort: $\Theta(N\text{log}N)$</p>

<ul>
  <li>Merging two sorted lists into one sorted list has a time complexity of $O(N)$. Therefore, by repeatedly performing the merge operation $\text{k=log}N$ times, we can achieve the merge sort.</li>
</ul>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/mergesort.png?raw=true" alt="mergesort" style="zoom:40%;" /></p>

<h2 id="62-disjoint-sets">6.2 Disjoint Sets</h2>

<h3 id="621-introduction">6.2.1 Introduction</h3>

<p><strong>Disjoint Sets:</strong> Two sets are named <em>disjoint sets</em> if they have no elements in common.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">connect(p, q)</code>: connect <code class="language-plaintext highlighter-rouge">p</code> and <code class="language-plaintext highlighter-rouge">q</code>. Also known as <code class="language-plaintext highlighter-rouge">union</code></li>
  <li><code class="language-plaintext highlighter-rouge">isConnected(p, q)</code>: returns true if <code class="language-plaintext highlighter-rouge">p</code> and <code class="language-plaintext highlighter-rouge">q</code> are connected (i.e. part of the same set).</li>
</ul>

<p>A <strong>Disjoint Sets data structure</strong> has a fixed number of elements that each start out in their own subset. By calling <code class="language-plaintext highlighter-rouge">connect(p, q)</code> for some elements <code class="language-plaintext highlighter-rouge">p</code> and <code class="language-plaintext highlighter-rouge">q</code>, we merge subsets together.</p>

<p><strong>DisjointSets interface:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DisjointSets</span> <span class="o">{</span>
    <span class="cm">/** connects two items P and Q */</span>
    <span class="kt">void</span> <span class="nf">connect</span><span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">q</span><span class="o">);</span>

    <span class="cm">/** checks to see if two items are connected */</span>
    <span class="kt">boolean</span> <span class="nf">isConnected</span><span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">q</span><span class="o">);</span> 
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="622-quick-uniton">6.2.2 Quick Uniton</h3>

<p>Although we represent the sets using only an array, but we can visualize it as trees. We assign each item the index of its parent (element (p/q)). If an item has no parent, then it is a ‚Äòroot‚Äô and we assign it a negative value. A helper function <code class="language-plaintext highlighter-rouge">find(int item)</code> which returns the root of the tree <code class="language-plaintext highlighter-rouge">item</code>is in.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/quickunion1.png?raw=true" alt="quickunion1" style="zoom:40%;" /></p>

<p>If two elements are part of the same set, then they will be in the same tree. Thus, they will have the same root. So for <code class="language-plaintext highlighter-rouge">isConnected(p, q)</code> we simply check if <code class="language-plaintext highlighter-rouge">find(p) == find(q)</code>.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/quickunion2.png?raw=true" alt="quickunion2" style="zoom:40%;" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuickUnionDS</span> <span class="kd">implements</span> <span class="nc">DisjointSets</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">QuickUnionDS</span><span class="o">(</span><span class="kt">int</span> <span class="no">N</span><span class="o">)</span> <span class="o">{</span>
    	    <span class="n">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>
    	    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        	    <span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
   	    <span class="o">}</span>
 
  	<span class="kd">private</span> <span class="kt">int</span> <span class="nf">find</span><span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
    	    <span class="k">while</span> <span class="o">(</span><span class="n">p</span> <span class="o">!=</span> <span class="n">parent</span><span class="o">[</span><span class="n">p</span><span class="o">])</span>
        	    <span class="n">p</span> <span class="o">=</span> <span class="n">parent</span><span class="o">[</span><span class="n">p</span><span class="o">];</span>
       	<span class="k">return</span> <span class="n">p</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isConnected</span><span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nf">find</span><span class="o">(</span><span class="n">p</span><span class="o">)</span> <span class="o">==</span> <span class="n">find</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
<span class="o">}</span>
 
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">connect</span><span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
        <span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Worst case: when there‚Äôs only one b ranch of the tree and the tree is very long, the time complexity of the <code class="language-plaintext highlighter-rouge">find</code> ist O(N).</p>

<h3 id="623-weighted-quick-union-wqu">6.2.3 Weighted Quick Union (WQU)</h3>

<p>The shorter the tree the faster it takes to climb to the root of a tree. We should always link the root to the smaller tree to the larger tree.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/linktree1.png?raw=true" alt="linktree1" style="zoom:30%;" /></p>

<p>There‚Äôs two options for connecting them:</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/linktree2.png?raw=true" alt="linktree2" style="zoom:40%;" /></p>

<p>The <strong>second option is preferable</strong> as it only has a height of 2, rather than 3. We determine smaller / larger by the <strong>number of items</strong> in a tree. Thus, when connecting two trees we need to know their size. We can store this information in the root of the tree by replacing the <code class="language-plaintext highlighter-rouge">-1</code>‚Äôs with <code class="language-plaintext highlighter-rouge">-(size of tree)</code>. By extension, the runtimes of <code class="language-plaintext highlighter-rouge">connect</code> and <code class="language-plaintext highlighter-rouge">isConnected</code> are bounded by O(log N).</p>

<p><strong>Note:</strong></p>

<ol>
  <li>Track tree size (number of elements).</li>
  <li>Always link root of smaller tree to larger tree.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">connect</span><span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
	<span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">q</span><span class="o">);</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">size</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span> <span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span> <span class="n">size</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">+=</span> <span class="n">size</span><span class="o">[</span><span class="n">i</span><span class="o">];</span> <span class="o">}</span>
	<span class="k">else</span> <span class="o">{</span> <span class="n">parent</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="n">size</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+=</span> <span class="n">size</span><span class="o">[</span><span class="n">j</span><span class="o">];</span> <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Example Implementations:</p>

<ul>
  <li>WQU: https://algs4.cs.princeton.edu/15uf/WeightedQuickUnionUF.java.html</li>
  <li>Weighted Quick Union with Path Compression: https://algs4.cs.princeton.edu/15uf/QuickUnionPathCompressionUF.java.html</li>
</ul>

<h2 id="63-adt">6.3 ADT</h2>

<p>Some commonly used ADT‚Äôs are:</p>

<ul>
  <li>Stacks: Structures that support last-in first-out retrieval of elements
    <ul>
      <li><code class="language-plaintext highlighter-rouge">push(int x)</code>: puts x on the top of the stack</li>
      <li><code class="language-plaintext highlighter-rouge">int pop()</code>: takes the element on the top of the stack</li>
    </ul>
  </li>
  <li>Lists: an ordered set of elements
    <ul>
      <li><code class="language-plaintext highlighter-rouge">add(int i)</code>: adds an element</li>
      <li><code class="language-plaintext highlighter-rouge">int get(int i)</code>: gets element at index i</li>
    </ul>
  </li>
  <li>Sets: an unordered set of unique elements (no repeats)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">add(int i)</code>: adds an element</li>
      <li><code class="language-plaintext highlighter-rouge">contains(int i)</code>: returns a boolean for whether or not the set contains the value</li>
    </ul>
  </li>
  <li>Maps: set of key/value pairs
    <ul>
      <li><code class="language-plaintext highlighter-rouge">put(K key, V value)</code>: puts a key value pair into the map</li>
      <li><code class="language-plaintext highlighter-rouge">V get(K key)</code>: gets the value corresponding to the key</li>
    </ul>
  </li>
</ul>

<h2 id="64-binary-search-trees-bsts">6.4 Binary Search Trees (BSTs)</h2>

<p>Linked Lists takes a longtime to search for an item, even if the list is sorted. In the worst case, the time complexity could be O(logN).</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/BST1.png?raw=true" alt="BST1" style="zoom:20%;" /></p>

<p><strong>BST:</strong> We can use binary search to find a sorted element faster. Specifically, in $\text{log}(n)$ time. To do so, we can put a pointer at the middle node and aligning the next-layer pointer similarly. Within the binary search tree, each value in the left branch is smaller than the node itself, while values in the right branch are greater. As such, we can focus on the middle element. If this element is larger than the target element, we look to the left of it; if smaller, we look to the right. We then look at the middle element of the respective halves and repeat the process until we find the element we are looking for (or don‚Äôt find it because the list doesn‚Äôt contain it). Note that duplicate nodes are <strong>not</strong> allowed in a BST.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/BST2.png?raw=true" alt="BST2" style="zoom:40%;" /></p>

<p>Trees are composed of:</p>

<ul>
  <li>nodes</li>
  <li>edges that connect those nodes. There is only one path between any two nodes.</li>
  <li>root node which is a node that has no parents.</li>
  <li>leaves which are nodes with no children. When inserting a node, it is always inserted at a leaf node.</li>
</ul>

<p><strong>Delete:</strong></p>

<ul>
  <li>the node we are trying to delete has <strong>no</strong> children: then it‚Äôs a leaf, so just simply delete it.</li>
  <li>has <strong>1</strong> child: just reassign the parent‚Äôs child pointer to the node‚Äôs child and then delete the node.</li>
  <li>has <strong>2</strong> children: we choose a new node to replace the deleted one. The replacement node can be the <strong>right-most</strong> node in the left subtree or the <strong>left-most</strong> node in the right subtree. If the chosen replacement node has a child, the parent of the chose node is updated to directly point to the child of the chosen node (Hubbard deletion). For example, the figure above: if we want to delete node D, we have the option to replace D with either C or E.</li>
</ul>

<h2 id="65-balanced-trees">6.5 Balanced Trees</h2>

<p><strong>B-trees / 2-3 trees:</strong> The problem with BST‚Äôs is that we always insert at a leaf node. This is what causes the height to increase. When we perform an insertion by adding to a current leaf node, the height of the tree will not increase. Note: 1) B Trees are balanced, 2) It‚Äôs necessary to establish a constraint on the maximum number of elements within a single node; otherwise, the structure could degrade into a mere linked list. The process of adding a node to a <strong>2-3</strong> tree is:</p>

<ol>
  <li>
    <p>For example, we want to add 17, 18 and 19 into the tree below. Since they are greater than 15, they will be inserted into the node with item 16.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/2-3-tree1.png?raw=true" alt="2-3-tree1.png" style="zoom:60%;" /></p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/2-3-tree2.png?raw=true" alt="2-3-tree2.png" style="zoom:60%;" /></p>
  </li>
  <li>
    <p>In a 2-3 tree, a node can hold only 2 items. As a result, item 17 needs to move up to the parent node. Additionally, since 16 is smaller than 17, we must remove 16 from the node containing 16, 17, 18, and 19, and let item 16 become a new node.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/2-3-tree3.png?raw=true" alt="2-3-tree3.png" style="zoom:60%;" /></p>
  </li>
  <li>
    <p>Moreover, if we intend to add two additional items, 20 and 21, we can simply repeat steps 1 and 2.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/2-3-tree4.png?raw=true" alt="2-3-tree4.png" style="zoom:60%;" /></p>
  </li>
</ol>

<p>The process of adding a node to a <strong>2-3-4</strong> tree is:</p>

<ol>
  <li>
    <p>We still always inserting into a leaf node, so take the node you want to insert and traverse down the tree with it, going left and right according to whether or not the node to be inserted is greater than or smaller than the items in each node. e.g. we want to add y and z into the tree below, since y and z are greater than m and oqs. Therefore, they will be inserted into the node with items t and u.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/2-3-4-tree1.png?raw=true" alt="2-3-4-tree1.png" style="zoom:60%;" /></p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/2-3-4-tree2.png?raw=true" alt="2-3-4-tree2.png" style="zoom:60%;" /></p>
  </li>
  <li>
    <p>After adding the node to the leaf node, if the new node has 4 nodes, then pop up the middle left node and re-arrange the children accordingly. The item u from the node tuyz should be moved to the parent node. Additionally, since t is smaller than u, we should remove t from the node tuyz and let item t become a new node.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/2-3-4-tree3.png?raw=true" alt="2-3-4-tree3.png" style="zoom:60%;" /></p>
  </li>
  <li>
    <p>If this results in the parent node having 4 nodes, then pop up the middle left node again, rearranging the children accordingly. This means the item q should be moved to the root. Therefore, we must remove the item o and allow it to become a node between the root m and q, as m &lt; o &lt; q.</p>
  </li>
  <li>
    <p>Repeat this process until the parent node can accommodate or you get to the root.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/2-3-4-tree4.png?raw=true" alt="2-3-4-tree4.png" style="zoom:60%;" /></p>
  </li>
</ol>

<p><strong>Rotation Trees:</strong> The formal definition of rotation is:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">RotateLeft(G):</code>Let x be the right child of G. Make G the new left child of x.</li>
  <li><code class="language-plaintext highlighter-rouge">RotateRight(G):</code>Let x be the left child of G. Make G the new right child of x.</li>
</ul>

<p>For example: Let k be the right child of G. Make G the new left child of P.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/rotation-tree.png?raw=true" alt="rotation-tree.png" style="zoom:70%;" /></p>

<p><strong>Red-Black Trees</strong> is a mutation of 2-3 tree. To let it balanced like 2-3 tree we could create ‚Äúglue‚Äù links with the smaller item off to the left. We choose arbitrarily to make the left element a child of the right one. This results in a <strong>left-leaning</strong> tree. We show that a link is a glue link by making it red. Normal links are black. Because of this, we call these structures <strong>left-leaning red-black trees (LLRB)</strong>. Left-Leaning Red-Black trees have a <strong>1-1 correspondence with 2-3 trees</strong>. Every 2-3 tree has a unique LLRB red-black tree associated with it. As for 2-3-4 trees, they maintain correspondence with standard Red-Black trees.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/red-black-tree.png?raw=true" alt="red-black-tree.png" style="zoom:70%;" /></p>

<p>Here are the <strong>properties</strong> of LLRB‚Äôs:</p>

<ul>
  <li>1-1 correspondence with 2-3 trees.</li>
  <li>No node has 2 red links (otherwise it‚Äôd be like a 4 node, e.g. 2-3-4 tree).</li>
  <li>Every path from root to a leaf has same number of black links, because 2-3 trees have same number of links to every leaf.</li>
  <li>Height is no more than 2x height of corresponding 2-3 tree, because every 2-3 tree has maximum 2 items</li>
</ul>

<p>Here is a summary of all the <strong>operations</strong>:</p>

<ul>
  <li>When inserting: Use a red link.</li>
  <li>If there is aright leaning ‚Äú3-node‚Äù, we have a Left Leaning Violation
    <ul>
      <li>Rotate left the appropriate node to fix.</li>
    </ul>
  </li>
  <li>If there are two consecutive left links, we have an incorrect 4 Node Violation!
    <ul>
      <li>Rotate right the appropriate node to fix.</li>
    </ul>
  </li>
  <li>If there are any nodes with two red children, we have a temporary 4 Node.
    <ul>
      <li>Color flip the node to emulate the split operation.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">private</span> <span class="nc">Node</span> <span class="nf">put</span><span class="o">(</span><span class="nc">Node</span> <span class="n">h</span><span class="o">,</span> <span class="nc">Key</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Value</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">h</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">,</span> <span class="no">RED</span><span class="o">);</span> <span class="o">}</span>

    <span class="kt">int</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>      <span class="o">{</span> <span class="n">h</span><span class="o">.</span><span class="na">left</span>  <span class="o">=</span> <span class="n">put</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">,</span>  <span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span> <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">cmp</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span> <span class="n">h</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">put</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">key</span><span class="o">,</span> <span class="n">val</span><span class="o">);</span> <span class="o">}</span>
    <span class="k">else</span>              <span class="o">{</span> <span class="n">h</span><span class="o">.</span><span class="na">val</span>   <span class="o">=</span> <span class="n">val</span><span class="o">;</span>                    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">))</span>      <span class="o">{</span> <span class="n">h</span> <span class="o">=</span> <span class="n">rotateLeft</span><span class="o">(</span><span class="n">h</span><span class="o">);</span>  <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">)</span>  <span class="o">&amp;&amp;</span>  <span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">left</span><span class="o">))</span> <span class="o">{</span> <span class="n">h</span> <span class="o">=</span> <span class="n">rotateRight</span><span class="o">(</span><span class="n">h</span><span class="o">);</span> <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">)</span>  <span class="o">&amp;&amp;</span>  <span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">))</span>     <span class="o">{</span> <span class="n">flipColors</span><span class="o">(</span><span class="n">h</span><span class="o">);</span>      <span class="o">}</span> 

    <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="66-advanced-trees">6.6 Advanced Trees</h2>

<p><strong>Tree Traversal:</strong></p>

<ul>
  <li>
    <p>Level Order Traversal: visit all nodes at every level, top-to-bottom, left-to-right.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">void</span> <span class="nf">levelOrder</span><span class="o">(</span><span class="nc">Tree</span> <span class="no">T</span><span class="o">,</span> <span class="nc">Action</span> <span class="n">toDo</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">T</span><span class="o">.</span><span class="na">height</span><span class="o">();</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">visitLevel</span><span class="o">(</span><span class="no">T</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">toDo</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
  
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitLevel</span><span class="o">(</span><span class="nc">Tree</span> <span class="no">T</span><span class="o">,</span> <span class="kt">int</span> <span class="n">level</span><span class="o">,</span> <span class="nc">Action</span> <span class="n">toDo</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="no">T</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span><span class="o">;</span> <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">lev</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">toDo</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="no">T</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="n">visitLevel</span><span class="o">(</span><span class="no">T</span><span class="o">.</span><span class="na">left</span><span class="o">(),</span> <span class="n">lev</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">toDo</span><span class="o">);</span>
        <span class="n">visitLevel</span><span class="o">(</span><span class="no">T</span><span class="o">.</span><span class="na">right</span><span class="o">(),</span> <span class="n">lev</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">toDo</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <ul>
      <li>Bushy tree: top level: 1, top two levels: 1+2=3, top three levels: 1+2+4=7,‚Ä¶, top log(N) levels: $\Theta (N)$.</li>
      <li>Spindly tree: top level: 1, top two levels: 1+1=2, top three levels: 1+1+1=3,‚Ä¶, top N levels: $\Theta (N^2)$.</li>
    </ul>
  </li>
  <li>
    <p>Depth First Traversals: visit a node, then traverse its children. The time complexity is $\Theta (N)$.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="n">preOrder</span><span class="o">(</span><span class="nc">BSTNode</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
    <span class="n">print</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">key</span><span class="o">);</span>
    <span class="n">preOrder</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
    <span class="n">preOrder</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p><strong>QuadTree:</strong> Trees of two dimensional data. A Quadtree is either:</p>

<ul>
  <li>Empty</li>
  <li>A ‚Äòroot‚Äô item at some position (x, y) AND <strong>four</strong> quadtrees that are NW, NE, SE, SW of (x, y)</li>
  <li>Use TWO compares to decide which direction to go.</li>
</ul>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/quadtree.png?raw=true" alt="quadtree.png" style="zoom:70%;" /></p>

<h1 id="7-hasing--heaps">7. Hasing &amp; Heaps</h1>

<h2 id="71-hash-table">7.1 Hash Table</h2>

<p>Every <code class="language-plaintext highlighter-rouge">Object</code> in Java has a default <code class="language-plaintext highlighter-rouge">.hashcode()</code> method to transform data into an <code class="language-plaintext highlighter-rouge">index</code>. Java computes this by figuring out where the <code class="language-plaintext highlighter-rouge">Object</code> sits in memory and uses that memory‚Äôs address to do something similar to what we did with <code class="language-plaintext highlighter-rouge">String</code>s.  This methods gives a <em>unique</em> hashcode for every single Java object.</p>

<p><strong>Concrete workflow:</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">add</code> item</p>

    <ul>
      <li>
        <p>Get hashcode (i.e., index) of item.</p>
      </li>
      <li>
        <p>If index has no item, create new List, and place item there.</p>
      </li>
      <li>
        <p>If index has a List already, check the List to see if item is already in there. If <em>not</em>, add item to List.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">contains</code> item</p>

    <ul>
      <li>
        <p>Get hashcode (i.e., index) of item.</p>
      </li>
      <li>
        <p>If index is empty, return <code class="language-plaintext highlighter-rouge">false</code>.</p>
      </li>
      <li>
        <p>Otherwise, check all items in the List at that index, and if the item exists, return <code class="language-plaintext highlighter-rouge">true</code>.</p>
      </li>
    </ul>
  </li>
</ul>

<p><strong>Hash Table:</strong> Since the size of a hash table is limited, when the number of items that need to be stored exceeds this hash table‚Äôs capacity, it inevitably leads to multiple items being stored in a single bucket of the hash table, e.g. potato, potato, totato. We can create a linked list structure for each bucket to store each object that needs to be stored in the corresponding hash table position.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/hash1.png?raw=true" alt="hash1.png" style="zoom:40%;" /></p>

<p><strong>Load Factor:</strong> Depends on the number of items in the ‚Äòbucket‚Äô. If N items are distributed across M buckets, average time grows with L = N / M, the Average runtime is $\Theta (\text{L})$.</p>

<p><strong>Steps for Using the Hash Table: Every item is mapped to a bucket number using a hash function:</strong></p>

<ol>
  <li>Computing a hashCode: integer between $-2^{31}$ and $2^{31}-1$.</li>
  <li>Computing index = hashCode modulo M. If the hashCode is negative, we can utilize Math.floorMod, for instance, -1 floormod 4 = 3.</li>
  <li>If L = N / M gets too large, increase M.</li>
</ol>

<p><strong>The hashCode Function for Strings:</strong> $h(s)=s_0\times 31^{n-1}+s_1\times 31^{n-2}+\dots+s_{n-1}$, e.g.  $\text{‚Äòc‚Äô}=s_0\times 31^{n-1}=1\times 31^{2}=31^2$.</p>

<p>Java‚Äôs hashCode() Method for Strings:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hash</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">h</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">char</span> <span class="n">val</span><span class="o">[]</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
        
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">value</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">h</span> <span class="o">=</span> <span class="mi">31</span> <span class="o">*</span> <span class="n">h</span> <span class="o">+</span> <span class="n">val</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="n">hash</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Note that for recursive data structures, the hashCode also needs to be calculated using a recursive approach. Here‚Äôs the implementation of the <code class="language-plaintext highlighter-rouge">hashCode()</code> method for a BST:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">+</span> <span class="mi">31</span> <span class="o">*</span> <span class="k">this</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()</span> <span class="o">+</span> <span class="mi">31</span> <span class="o">*</span> <span class="mi">31</span> <span class="o">*</span> <span class="k">this</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>All Objects have <code class="language-plaintext highlighter-rouge">hashCode()</code> function.</p>

<ul>
  <li>Default: <code class="language-plaintext highlighter-rouge">returns this</code> (i.e. address of object). Can have strange consequences: ‚Äúhello‚Äù.hashCode() is not the same as (‚Äúh‚Äù + ‚Äúello‚Äù).hashCode().</li>
  <li>Can override for your type.</li>
</ul>

<p><strong>HashMap:</strong> HashMap implements the Map interface, allowing you to store objects in it using the <code class="language-plaintext highlighter-rouge">put(key, value)</code> method and retrieve objects from it using the <code class="language-plaintext highlighter-rouge">get(key)</code> method. When you use <code class="language-plaintext highlighter-rouge">put()</code> to provide a key and value, the <code class="language-plaintext highlighter-rouge">hashCode()</code> method is first applied to the key. Based on the calculated hashCode, the entry is determined to be placed in a specific bucket within the hash table. If a key in that bucket exists and is <code class="language-plaintext highlighter-rouge">.equals()</code> to the key you‚Äôre putting, then the value associated with that existing key is overwritten. Otherwise, the new key-value pair is inserted at the beginning of the linked list. When the load factor L becomes too large, M is increased by a factor of two, and then rehash it.</p>

<h2 id="72-priority-queue--heaps">7.2 Priority Queue &amp; Heaps</h2>

<p>A <strong>Priority Queue</strong> is an ADT that optimizes for handling minimum or maximum elements and supports the following APIs:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="cm">/** (Min) Priority Queue: Allowing tracking and removal of 
  * the smallest item in a priority queue. */</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MinPQ</span><span class="o">&lt;</span><span class="nc">Item</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="cm">/** Adds the item to the priority queue. */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Item</span> <span class="n">x</span><span class="o">);</span>
    <span class="cm">/** Returns the smallest item in the priority queue. */</span>
    <span class="kd">public</span> <span class="nc">Item</span> <span class="nf">getSmallest</span><span class="o">();</span>
    <span class="cm">/** Removes the smallest item from the priority queue. */</span>
    <span class="kd">public</span> <span class="nc">Item</span> <span class="nf">removeSmallest</span><span class="o">();</span>
    <span class="cm">/** Returns the size of the priority queue. */</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">size</span><span class="o">();</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Implementing a priority queue using the data structure <strong>Binary Min-Heap:</strong> Binary tree that is complete and obeys min-heap property.</p>

<ul>
  <li>Min-heap: Every node is less than or equal to both of its children.</li>
  <li>Complete: Missing items only at the bottom level (if any), all nodes are as far left as possible.</li>
</ul>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/heap1.png?raw=true" alt="heap1.png" style="zoom:60%;" /></p>

<p>Methods of Priority Queue:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">getSmallest</code>: Return the item in the root node.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">add</code>: place the item in the last position, and make it as high as possible (Swim up the hierarchy to the proper place. Swimming involves swapping nodes if child &lt; parent), e.g. insert 3.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/heap-example1.png?raw=true" alt="heap-example1.png" style="zoom:30%;" /></p>

    <p>Add to end of heap temporarily.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/heap-example2.png?raw=true" alt="heap-example2.png" style="zoom:30%;" /></p>

    <p>Swim up the hierarchy to your rightful place</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/heap-example3.png?raw=true" alt="heap-example3.png" style="zoom:30%;" /></p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/heap-example4.png?raw=true" alt="heap-example4.png" style="zoom:30%;" /></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">removeSmallest</code>: Swap the last item in the heap into the root. Sink down the hierarchy to the proper place. Sinking involves swapping nodes if parent &gt; child. Swap with the smallest child to preserve <em>min-heap</em> property, e.g. remove 1.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/heap-example5.png?raw=true" alt="heap-example5.png" style="zoom:27.5%;" /></p>

    <p>Swap the last item in the heap into the root.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/heap-example6.png?raw=true" alt="heap-example6.png" style="zoom:32%;" /></p>

    <p>Then sink your way down the hierarchy, yielding to most qualified folks.</p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/heap-example7.png?raw=true" alt="heap-example7.png" style="zoom:30%;" /></p>

    <p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/heap-example8.png?raw=true" alt="heap-example8.png" style="zoom:29%;" /></p>
  </li>
</ul>

<p>**Heap Implementation: **Store keys in an array. Offset everything by 1 spot, but leave spot array[0] empty.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/head-imp.png?raw=true" alt="head-imp.png" style="zoom:70%;" /></p>

<p>The function for computation of children and parents:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">leftChild(k)</code>= k‚àó2</li>
  <li><code class="language-plaintext highlighter-rouge">rightChild(k)</code>= k‚àó2+1</li>
  <li><code class="language-plaintext highlighter-rouge">parent(k)</code> = k/2</li>
</ul>

<table>
  <thead>
    <tr>
      <th>Methods</th>
      <th>Ordered Array</th>
      <th>Bushy BST</th>
      <th>Hash Table</th>
      <th>Heap</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">add</code></td>
      <td>Œò(N)</td>
      <td>Œò(logN)</td>
      <td>Œò(1)</td>
      <td>Œò(logN)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">getSmallest</code></td>
      <td>Œò(1)</td>
      <td>Œò(logN)</td>
      <td>Œò(N)</td>
      <td>Œò(1)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">removeSmallest</code></td>
      <td>Œò(N)</td>
      <td>Œò(logN)</td>
      <td>Œò(N)</td>
      <td>Œò(logN)</td>
    </tr>
  </tbody>
</table>

<h2 id="73-data-structures-summary">7.3 Data Structures Summary</h2>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/datastructures.png?raw=true" alt="datastructures.png" style="zoom:50%;" /></p>

<p><strong>Search Data Structures:</strong></p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Store Operation(s)</th>
      <th>Primary Retrieval Operation</th>
      <th>Retrieve By</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>List</td>
      <td><code class="language-plaintext highlighter-rouge">add(key)</code>, <code class="language-plaintext highlighter-rouge">insert(key, index)</code></td>
      <td><code class="language-plaintext highlighter-rouge">get(index)</code></td>
      <td>index</td>
    </tr>
    <tr>
      <td>Map</td>
      <td><code class="language-plaintext highlighter-rouge">put(key, value)</code></td>
      <td><code class="language-plaintext highlighter-rouge">get(key)</code></td>
      <td>key identity</td>
    </tr>
    <tr>
      <td>Set</td>
      <td><code class="language-plaintext highlighter-rouge">add(key)</code></td>
      <td><code class="language-plaintext highlighter-rouge">containsKey(key)</code></td>
      <td>key identity</td>
    </tr>
    <tr>
      <td>PQ</td>
      <td><code class="language-plaintext highlighter-rouge">add(key)</code></td>
      <td><code class="language-plaintext highlighter-rouge">getSmallest()</code></td>
      <td>key order (aka key size)</td>
    </tr>
    <tr>
      <td>Disjoint Sets</td>
      <td><code class="language-plaintext highlighter-rouge">connect(int1, int2)</code></td>
      <td><code class="language-plaintext highlighter-rouge">isConnected(int1, int2)</code></td>
      <td>two integer values</td>
    </tr>
  </tbody>
</table>

<h1 id="8-graphs">8. Graphs</h1>

<h2 id="81-intro-to-graphs">8.1 Intro to Graphs</h2>

<p>A graph consists of:</p>

<ul>
  <li>A set of nodes (or vertices)</li>
  <li>A set of <strong>zero</strong> of <strong>more</strong> edges, each of which connects two nodes.</li>
</ul>

<p>In general, note that <strong>all trees are also graphs, but not all graphs are trees.</strong></p>

<p>Based on whether the links have a direction, a graph can be categorized as directed (one-way) or undirected (both ways). If a node in a directed graph can follow a path and return to itself, then it is considered cyclic; otherwise, it is acyclic. In an undirected graph, if there are multiple paths from a node back to itself, then it is considered cyclic.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/graphtype.png?raw=true" alt="graphtype" style="zoom:50%;" /></p>

<p><strong>API:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Graph</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">Graph</span><span class="o">(</span><span class="kt">int</span> <span class="no">V</span><span class="o">);</span>  <span class="c1">// create empty graph with v vertices</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addEdge</span><span class="o">(</span><span class="kt">int</span> <span class="n">v</span><span class="o">,</span> <span class="kt">int</span> <span class="n">w</span><span class="o">);</span>   <span class="c1">// add an edge v-w</span>
    <span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">adj</span><span class="o">(</span><span class="kt">int</span> <span class="n">v</span><span class="o">);</span>  <span class="c1">// vertices adjacent to v</span>
    <span class="kt">int</span> <span class="nf">V</span><span class="o">();</span>  <span class="c1">// number of vertices</span>
    <span class="kt">int</span> <span class="nf">E</span><span class="o">();</span>  <span class="c1">// number of edges</span>
    
    <span class="c1">// degree is the # of adjacent vertices connected to some vertex</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">degree</span><span class="o">(</span><span class="nc">Graph</span> <span class="no">G</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">degree</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">:</span> <span class="no">G</span><span class="o">.</span><span class="na">adj</span><span class="o">(</span><span class="n">v</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">degree</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">degree</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="82-graph-traversal">8.2 Graph Traversal</h2>

<p><strong>Depth Frist Traversal (DFS, Stack, FILO):</strong> Determine whether there is a <strong>path</strong> from a node s to another node t. Worse for spindly graphs.</p>

<ol>
  <li>Mark s.</li>
  <li>Does <code class="language-plaintext highlighter-rouge">s == t</code>? If so, return true.</li>
  <li>If <code class="language-plaintext highlighter-rouge">connected(v, t)</code> for any unmarked neighbour v of s, return true.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DepthFirstPaths</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">marked</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">edgeTo</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">s</span><span class="o">;</span>
 	
    <span class="kd">public</span> <span class="nf">DepthFirstPaths</span><span class="o">(</span><span class="nc">Graph</span> <span class="no">G</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">dfs</span><span class="o">(</span><span class="no">G</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
 	
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="nc">Graph</span> <span class="no">G</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">marked</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">:</span> <span class="no">G</span><span class="o">.</span><span class="na">adj</span><span class="o">(</span><span class="n">v</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">marked</span><span class="o">[</span><span class="n">w</span><span class="o">])</span> <span class="o">{</span>
            <span class="n">edgeTo</span><span class="o">[</span><span class="n">w</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
            <span class="n">dfs</span><span class="o">(</span><span class="no">G</span><span class="o">,</span> <span class="n">w</span><span class="o">);</span>
        <span class="o">}</span>        	
    <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Breadth First Traversal (BFS, queue, FIFO):</strong> We visit all nodes 1 edges from our source. Then, all nodes 2 edges from our source, etc. The goal is to find the shortest path between ‚Äòs‚Äô and every other vertex. Worse for bushy graphs.</p>

<ol>
  <li>Initialize the fringe (a <strong>queue</strong> with the starting vertex s) and mark that vertex, initialize the pointer ‚Äòv‚Äô to ‚Äòs‚Äô. Repeat 2 and 3 until queue is empty:</li>
  <li>Remove vertex v from the fringe.</li>
  <li>For each unmarked neighbor n of v: Mark n and Add n to fringe, Set edgeTo[n] = v then Set distTo[n] = distTo[v] + 1.</li>
</ol>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/bfs1.png?raw=true" alt="bfs1" style="zoom:55%;" /> <img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/bfs2.png?raw=true" alt="bfs2" style="zoom:52.5%;" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BreadthFirstPaths</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">marked</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">edgeTo</span><span class="o">;</span>
  <span class="o">...</span>
	
  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">bfs</span><span class="o">(</span><span class="nc">Graph</span> <span class="no">G</span><span class="o">,</span> <span class="kt">int</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">fringe</span> <span class="o">=</span> 
          <span class="k">new</span> <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
  <span class="n">fringe</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
  <span class="n">marked</span><span class="o">[</span><span class="n">s</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
  <span class="k">while</span> <span class="o">(!</span><span class="n">fringe</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="n">fringe</span><span class="o">.</span><span class="na">dequeue</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">:</span> <span class="no">G</span><span class="o">.</span><span class="na">adj</span><span class="o">(</span><span class="n">v</span><span class="o">))</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(!</span><span class="n">marked</span><span class="o">[</span><span class="n">w</span><span class="o">])</span> <span class="o">{</span>
        <span class="n">fringe</span><span class="o">.</span><span class="na">enqueue</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
        <span class="n">marked</span><span class="o">[</span><span class="n">w</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">edgeTo</span><span class="o">[</span><span class="n">w</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Topological Sort</strong></p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/topo.png?raw=true" alt="topo" style="zoom:50%;" /></p>

<p>For a Directed Acyclic Graph (DAG), output a sequence such that when ‚Äòs‚Äô points to ‚Äòt‚Äô, ‚Äòt‚Äô cannot appear before ‚Äòs‚Äô in the sequence, for example valid ordering: [0, 2, 1, 3, 5, 4, 7, 6], or [2, 0, 3, 5, 1, 4, 6, 7].</p>

<p>Algorithm: Start with nodes having a degree of 0, perform a postorder DFS, store the output in a list, and then reverse the list.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/topo2.png?raw=true" alt="topo2" style="zoom:50%;" /></p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/topo3.png?raw=true" alt="topo3" style="zoom:50%;" /></p>

<p>After reversing the list, it should be: [2, 5, 6, 0, 3, 1, 4, 7].</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="rouge-code"><pre><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DepthFirstOrder</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">marked</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">reversePostorder</span><span class="o">;</span>		<span class="c1">// uses a stack instead of a creating a list and then reversing it.</span>
	<span class="kd">public</span> <span class="nf">DepthFirstOrder</span><span class="o">(</span><span class="nc">Digraph</span> <span class="no">G</span><span class="o">)</span> <span class="o">{</span>
   	 <span class="n">reversePostorder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
   	 <span class="n">marked</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="no">G</span><span class="o">.</span><span class="na">V</span><span class="o">()];</span>
   	<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">v</span> <span class="o">&lt;</span> <span class="no">G</span><span class="o">.</span><span class="na">V</span><span class="o">();</span> <span class="n">v</span><span class="o">++)</span> <span class="o">{</span>
       	<span class="k">if</span> <span class="o">(!</span><span class="n">marked</span><span class="o">[</span><span class="n">v</span><span class="o">])</span> <span class="o">{</span> <span class="n">dfs</span><span class="o">(</span><span class="no">G</span><span class="o">,</span> <span class="n">v</span><span class="o">);</span> <span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="nc">Digraph</span> <span class="no">G</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
   	    <span class="n">marked</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
   	    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">:</span> <span class="no">G</span><span class="o">.</span><span class="na">adj</span><span class="o">(</span><span class="n">v</span><span class="o">))</span> <span class="o">{</span>
           	<span class="k">if</span> <span class="o">(!</span><span class="n">marked</span><span class="o">[</span><span class="n">w</span><span class="o">])</span> <span class="o">{</span> <span class="n">dfs</span><span class="o">(</span><span class="no">G</span><span class="o">,</span> <span class="n">w</span><span class="o">);</span> <span class="o">}</span> 
         <span class="o">}</span>
         <span class="n">reversePostorder</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
 	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">reversePostorder</span><span class="o">()</span>
	<span class="o">{</span> <span class="k">return</span> <span class="n">reversePostorder</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="83-shortest-paths">8.3 Shortest Paths</h2>

<p><strong>Dijkstra‚Äôs Algorithm:</strong> For an unweighted edge graph, BFS can find the shortest path from one point to another (because it is sorted by level). However, for weighted edge graphs, the level does not fully reflect proximity, so Dijkstra‚Äôs algorithm is needed to calculate the shortest path. Note that the ‚ÄòShortest Path Tree‚Äô will always be a tree because for every node, there was exactly one ‚Äòparent‚Äô in the <code class="language-plaintext highlighter-rouge">edgeTo</code> array. Dijkstra‚Äôs algorithm takes in an input vertex <em>s</em> as source node, and outputs the shortest path tree from <em>s</em> to <em>v</em>. Insert all vertices into the fringe PQ, storing vertices in order of distance from the source. Note that the distance between <em>s</em> and <em>s</em> is 0. Then repeat: remove the closest vertex <em>v</em> from the PQ and relax all edges pointing from <em>v</em>.</p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/djk1.png?raw=true" alt="djk1" style="zoom:50%;" /></p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/djk2.png?raw=true" alt="djk2" style="zoom:50%;" /></p>

<p><img src="https://github.com/tasogarenaki/tasogarenaki.github.io/blob/main/pics/cs61b/djk3.png?raw=true" alt="djk3" style="zoom:50%;" /></p>

<p>The <strong>A* algorithm</strong> is suitable for situations where the destination is known, rather than finding the shortest path for all points. Unlike Dijkstra‚Äôs best-first search, Dijkstra‚Äôs algorithm only considers the distance from a point to the source as the basis for popping ‚Äòv‚Äô from the PQ. However, A* takes into account both the distance from the point to the source and the estimated distance from the point to the target. It uses this combined distance to determine the order of popping. The estimated distance should not be greater than the actual distance. But please note: when updating the ‚ÄòdistTo‚Äô array, the updates are still based on the distance from the point to the source. Additionally, when visiting the target point, you cannot immediately stop the traversal. You need to ensure that all neighboring points of the target points have also been visited before determining the shortest path. This is because, when considering the estimated distance, the nodes that have already been popped may not necessarily be part of the shortest path, so you need to compare all possible shortest paths to the target point ‚Äòt‚Äô before making a final determination.</p>

:ET
[
  
  {
    "title": "Python Note",
    "url": "/posts/Python-Note/",
    "categories": "Note, CS",
    "tags": "note",
    "date": "2022-06-01 10:11:00 +0000",
    





    "snippet": "1 Fundations  install pip:  $ curl https://bootstrap.pypa.io/pip/get-pip.py -o get-pip.py  $ sudo python3 get-pip.py  Some Commands:          control + d: exit()      control + l: clear      python3 -i name.py      handle = open(filename, mode)      quit(): break      append() to add elements in list      sort() to sort elements in list      split() to remove element (here (none)) from the list      dict_name.get(xxx, 0) + 1: if in dict() has xxx then xxx+1 otherwise 0+1        Position of numbers without []:&amp;gt;&amp;gt;&amp;gt; n = 18117&amp;gt;&amp;gt;&amp;gt; all_but_last, last = n // 10, n % 10all_but_last = 1811   # via //last = 7              # via %  Placeholder:          %d: decimal      %f: float      %%: percent      e.g.: print(&#39;%d + %d = %d&#39; % (a, b, a + b))       2 Coursera: PY4E2.1 Fundations  Regular Expressions and Extracting Data:          import re      re.search()      re.findall()      see e9.py                  Symbol      Explanation                  ^      Matches the beginning of a line              $      Matches the end of the line              .      Matches any character              \\s      Matches whitespace              \\S      Matches any non-whitespace character              *****      Repeats a character zero or more times              *?      Repeats a character zero or more times (non-greedy)              +      Repeats a character one or more times              +?      Repeats a character one or more times (non-greedy)              [aeiou]      Matches a single character in the listed set              [^XYZ]      Matches a single character not in the listed set              [a-z0-9]      The set of characters can include a range              ( )      Only show date inside of ()        Socket          import socket      Port 80: Web Server, HTTP(80)      decode()        Retrieving Web Pages          use Chrome to view the page source      import urllib.request, urllib.parse, urllib.error      fhand = urllib.request.urlopen(&#39;http://xxxxx&#39;)for line in fhand:	print(line.decode().strip())  Beautifulsoup4: e11.py          from bs4 import BeautifulSoup      Example to get img: https://divertingpan.github.io/post/python_tieba/        1) download BeautifulSoup4    2) unzip and Terminal geht to the folder    3) sudo python3 ./setup.py i nstall    4) pip install soupsieve    eXtensible Markup Language (XML)          share structured data      import xml.etree.ElementTree as ET      xxx.findall(‘a/b’): find all tags b from a        JavaScript Object Notation (JSON)          import json      &#39;&#39;&#39;[ xxx ]&#39;&#39;&#39;      info = json.loads(xxx)        Service Oriented Approach          Application Programming Interfaces (API)      import twurl      twurl.augment(url, {‘xx’})      GeoJason API: http://maps.googleapis.com/maps/api/geocode/json?        Class and Object          class xxx:      object: test = xxx():      function: def xxx:      subclass: class name2(class_name1):        assert expression:          test if expression is False: assert 1 == 0, &#39;xxx&#39;. This is False, so show &#39;xxx&#39;      assert 1 == 1, ‘xxx’. This is True, show nothing.      2.2 Examples  Example e1:          if error, still accept, then run yyy and continue.      try: 	xxx      except ValueError: 	yyy 	continue  Example e2:          find position, print out xxx between position 1 and 2.      text = abcdef n1 = text.find(&#39;c&#39;)n2 = text.find(&#39;f&#39;)n3 = text[n1:n2+1]print(n3)  Example e3:          use os function to use os.getcwd() to now the path and use os.chdir() to change the path      rstrip(): move the blank line      import osprint(os.getcwd())os.chdir(&#39;/Users/Terry/Desktop&#39;)# Use words.txt as the file namefname = input(&quot;Enter file name: &quot;)fh = open(fname)for line in fh:    line = line.rstrip()    line = line.upper()    print(line)  Example e5:          lst.split() error, so should use lst[0].split() to remove blank.      list(set(xx)) to remove repeated elements      fname = input(&quot;Enter file name: &quot;)fh = open(fname)lst = list()new = list()count = 0 for line in fh:    line = line.rstrip()    lst.append(line)    new = new + lst[count].split()     count = count + 1 new = list(set(new))new.sort()print(new)  Example e14:# compute the sum of the numbers in the file and enter the sum# the numbers are inside tag &#39;count&#39;address = input(&#39;Enter location: &#39;)url = address print(&#39;Retrieving&#39;, url)uh = urllib.request.urlopen(url, context=ctx)data = uh.read()print(&#39;Retrieved&#39;, len(data), &#39;characters&#39;)tree = ET.fromstring(data)sum = 0# locatate &#39;count&#39; and find them allcounts = tree.findall(&#39;.//count&#39;)print(&#39;Count:&#39;, len(counts))for count in counts:    # the numbers are &#39;text&#39; from count    sum += int(count.text)print(sum)  Databases: e17.py and e18.py          SQLite Browser      import sqlite3      Reconstructing Data with JOIN: select … from … join … on …      inside python code, should use SQL code:      xyz.execute(&#39;UPDATE xxx SET yyy=xxx WHERE xxxx&#39;)xxx = sqlite.connect(&#39;xxx.sqlite&#39;)yyy = xxx.cursor()yyy.execute(&#39;SQL code&#39;)3 CS61A3.1 Fundations  *args and **kwargs:          *args: unknown functions/parameters      **kwargs: same but list      def printed(f):     	def print_and_return(*args):         	result = f(*args)         	print(&#39;Result:&#39;, result)         	return result     	return print_and_return&amp;gt;&amp;gt;&amp;gt; printed_pow = printed(pow)&amp;gt;&amp;gt;&amp;gt; printed_pow(2, 8)Result: 256256&amp;gt;&amp;gt;&amp;gt; printed_abs = printed(abs)&amp;gt;&amp;gt;&amp;gt; printed_abs(-10)Result: 1010  Higher-Order Functions:          use function inside of function      def apply_twice(f, x):    return f(f(x))  	# here call the f function with x, f can be i.e. square def square(x):    return x * x&amp;gt;&amp;gt;&amp;gt; apply_twice(square, 2)      # f is now the function square(x) with x = 216  Lambda Expressions:          lambda &amp;lt;parameters&amp;gt;: &amp;lt;return expression&amp;gt;      (lambda &amp;lt;parameters A&amp;gt;: &amp;lt;return function&amp;gt;)(lambda &amp;lt;parameters A&amp;gt;: lambda &amp;lt;parameters B&amp;gt;:  &amp;lt;return expression&amp;gt;)      lambda is a function with formal parameter x=10 that returns the value of x*x, it’s like def      x = 10square = x * xsquare = lambda x: x * x	print(square(4))  List          lst[::-1] creates a reversed list      &amp;gt;&amp;gt;&amp;gt; directors = [&#39;jenkins&#39;, &#39;spielberg&#39;, &#39;bigelow&#39;, &#39;kubrick&#39;]&amp;gt;&amp;gt;&amp;gt; directors[::-1][&#39;kubrick&#39;, &#39;bigelow&#39;, &#39;spielberg&#39;, &#39;jenkins&#39;]  List Comprehensions          [&amp;lt;map exp&amp;gt; for &amp;lt;name&amp;gt; in &amp;lt;iter exp&amp;gt; if &amp;lt;filter exp&amp;gt;]      &amp;gt;&amp;gt;&amp;gt; [x * x - 3 for x in [1, 2, 3, 4, 5] if x % 2 == 1][-2, 6, 22]First check the if statement with x from the List [1, 2, 3, 4, 5], then apply with x * x -3.  enumerate()# normal for-statement&amp;gt;&amp;gt;&amp;gt; i = 0&amp;gt;&amp;gt;&amp;gt; seq = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]&amp;gt;&amp;gt;&amp;gt; for element in seq:...     print i, seq[i]...     i += 1... 0 one1 two2 three# wih enumerate()&amp;gt;&amp;gt;&amp;gt; seq = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]&amp;gt;&amp;gt;&amp;gt; for i, element in enumerate(seq):...     print i, element... 0 one1 two2 three  Trees          root: the node at the top of the tree      label: the value in a node, selected by the label function      branches: a list of trees directly under the tree’s root, selected by the branches function      leaf: a tree with zero branches      node: any location within the tree (e.g., root node, leaf nodes, etc.)      Constructor: tree(label, branches=[]): creates a tree object with the given label value at its root node and list of branches.      Selectors:                  label(tree): returns the value in the root node of tree.          branches(tree): returns the list of branches of the given tree.                    Convenience function: is_leaf(tree): returns True if tree’s list of branches is empty, and False otherwise.      3.2 Examples  Some Examples from lab02:def cycle(f1, f2, f3):    def func1(n):                               # first to give is n times        def func2(x):                           # second to give is x            run = n                                # run n times             order = 1                             # f1, f2, f3            result = x            if run:                while run:                    if order == 1:                        result = f1(result)                    elif order == 2:                        result = f2(result)                    elif order == 3:                        result = f3(result)                    order = order % 3 + 1       # f1 -&amp;gt; f2 -&amp;gt; f3 -&amp;gt; f1                    run -= 1            return result        return func2    return func1To run this function i.e. my_cycle = cycle(add1, times2, add3)(2)(1):1) inside function cycle has input f1, f2, f32) then has inside function func1(n) and func2(x) which in this case n = 2 and x = 1, cause func1 first defined.Alternative i.e.&amp;gt;&amp;gt;&amp;gt; my_cycle = cycle(add1, times2, add3)&amp;gt;&amp;gt;&amp;gt; add_one_then_double = my_cycle(2)&amp;gt;&amp;gt;&amp;gt; add_one_then_double(1)4  Some Examples from project cats:          full cases see here      # ----------------------------------------- Q1 ---------------------------------- #def choose(paragraphs, select, k):    &quot;&quot;&quot;Return the Kth paragraph from PARAGRAPHS for which SELECT called on the    paragraph returns true. If there are fewer than K such paragraphs, return    the empty string.    &quot;&quot;&quot;    # BEGIN PROBLEM 1    &quot;*** YOUR CODE HERE ***&quot;    # Index must be corrected, it&#39;s like &#39;remove&#39; all the False Index    # In this case used 2 different Index Systems to locate the correct one        # Check the List with full Indexs    for i in range(len(paragraphs)):        if select(paragraphs[i]):            # Check the corrected Index with right order            if k == 0:                return paragraphs[i]            k -= 1    return &#39;&#39;# ----------------------------------------- Q2 ---------------------------------- #def about(topic):    &quot;&quot;&quot;Return a select function that returns whether a paragraph contains one    of the words in TOPIC.    &amp;gt;&amp;gt;&amp;gt; about_dogs = about([&#39;dog&#39;, &#39;dogs&#39;, &#39;pup&#39;, &#39;puppy&#39;])    &amp;gt;&amp;gt;&amp;gt; choose([&#39;Cute Dog!&#39;, &#39;That is a cat.&#39;, &#39;Nice pup!&#39;], about_dogs, 0)    &#39;Cute Dog!&#39;    &amp;gt;&amp;gt;&amp;gt; choose([&#39;Cute Dog!&#39;, &#39;That is a cat.&#39;, &#39;Nice pup.&#39;], about_dogs, 1)    &#39;Nice pup.&#39;        &amp;gt;&amp;gt;&amp;gt; dogs = about([&#39;dogs&#39;, &#39;hounds&#39;])    &amp;gt;&amp;gt;&amp;gt; dogs(&#39;A paragraph about cats.&#39;)    False    &amp;gt;&amp;gt;&amp;gt; dogs(&#39;&quot;DOGS&quot; stands for Department Of Geophysical Science.&#39;)    True    &quot;&quot;&quot;    assert all([lower(x) == x for x in topic]), &#39;topics should be lowercase.&#39;    # BEGIN PROBLEM 2    &quot;*** YOUR CODE HERE ***&quot;    # Use Higher-Order Function    def check(x):        # remove punctuations, lowercase of sentence then split via utils.py        x = split(lower(remove_punctuation(x)))        # use double for-statement to find the same key word        for i in topic:            # same as topic[i] == x[k]:            if i in x:                return True        return False    return check# ----------------------------------------- Q6 ---------------------------------- #def shifty_shifts(start, goal, limit):    &quot;&quot;&quot;A diff function for autocorrect that determines how many letters    in START need to be substituted to create GOAL, then adds the difference in    their lengths.    &quot;&quot;&quot;    # BEGIN PROBLEM 6    diff = abs(len(start)-len(goal))    # version 1: return the correct answer for tests, but didn&#39;t pass the ok.py    # can&#39;t figured out why    count = 0    # Question required    if count &amp;gt; limit:        return limit + 1    # return diff_length + total     if len(start) == 0 or len(goal) == 0:        return count + diff    # count the different chars    if start[0] != goal[0]:        count += 1    # recursion: use [1:] -&amp;gt; by running every time the length of string will -1    # + count, cause will reset as 0 every time    return shifty_shifts(start[1:], goal[1:], limit) + count    # version 2: use Higher-Order function pass the ok.py    def counting(start, goal, limit, count):        if count &amp;gt; limit:            return limit + 1        if len(start) == 0 or len(goal) == 0:            return count + diff        if start[0] != goal[0]:            count += 1        return counting(start[1:], goal[1:], limit, count)    return counting(start, goal, limit, 0)# ----------------------------------------- Q7 ---------------------------------- #def pawssible_patches(start, goal, limit):    &quot;&quot;&quot;A diff function that computes the edit distance from START to GOAL.&quot;&quot;&quot;    # similar as shifty_shifts        def counting(start, goal, limit, count):        diff = abs(len(start)-len(goal))        if count &amp;gt; limit:            return limit + 1        # if one is empty, should change n times of lengh another word which is diff        if len(start) == 0 or len(goal) == 0:            return count + diff        # if same char, skip with next char        if start[0] == goal[0]:            return counting(start[1:], goal[1:], limit, count)        # minimize the amount        # if diff char, there&#39;s three conditions         # 1) compare with same index        # 2)/3):        # compare with one word each time, maybe a[1] == b[0]        # or a[0] == b[1], e.g. a, b = &quot;ckiteus&quot;, &quot;kittens&quot;        return min(counting(start[1:], goal[1:], limit, count+1),         counting(start[1:], goal, limit, count+1), counting(start, goal[1:], limit, count+1))        return counting(start, goal, limit, 0)# ----------------------------------------- Q8 ---------------------------------- #def report_progress(typed, prompt, user_id, send):    &quot;&quot;&quot;Send a report of your id and progress so far to the multiplayer server.&quot;&quot;&quot;    # BEGIN PROBLEM 8    &quot;*** YOUR CODE HERE ***&quot;    i = 0    for k in typed:        # located the first incorrect word        if k != prompt[i]:            break        i += 1    # calculate the error ratio    progress = i / len(prompt)    # &quot;print&quot;    send({&#39;id&#39;: user_id, &#39;progress&#39;: progress})    return progress # ----------------------------------------- Q9 ---------------------------------- #def time_per_word(times_per_player, words):    &quot;&quot;&quot;Given timing data, return a game data abstraction, which contains a list    of words and the amount of time each player took to type each word.    Arguments:        times_per_player: A list of lists of timestamps including the time                          the player started typing, followed by the time                          the player finished typing each word.        words: a list of words, in the order they are typed.    &quot;&quot;&quot;    # BEGIN PROBLEM 9    &quot;*** YOUR CODE HERE ***&quot;    &quot;&quot;&quot;    &amp;gt;&amp;gt;&amp;gt; p = [[1, 4, 6, 7], [0, 4, 6, 9]]    &amp;gt;&amp;gt;&amp;gt; words = [&#39;This&#39;, &#39;is&#39;, &#39;fun&#39;]    &amp;gt;&amp;gt;&amp;gt; game = time_per_word(p, words)    &amp;gt;&amp;gt;&amp;gt; all_words(game)   ----&amp;gt; game[0]    [&#39;This&#39;, &#39;is&#39;, &#39;fun&#39;]    &amp;gt;&amp;gt;&amp;gt; all_times(game)   ----&amp;gt; game[1]    [[3,2,1],[4,2,3]]    &amp;gt;&amp;gt;&amp;gt; p = [[0, 2, 3], [2, 4, 7]]    &amp;gt;&amp;gt;&amp;gt; game = time_per_word(p, [&#39;hello&#39;, &#39;world&#39;])    &amp;gt;&amp;gt;&amp;gt; word_at(game, 1)   ----&amp;gt; game[0][word_index]    &#39;world&#39;    &amp;gt;&amp;gt;&amp;gt; all_times(game)    [[2,1],[2,3]]    &amp;gt;&amp;gt;&amp;gt; time(game, 0, 1)   ----&amp;gt; game[1][player_num][word_index]    1: 0 -&amp;gt; [2,1] -&amp;gt; 1 -&amp;gt; [1]    &quot;&quot;&quot;    # Initial 2D-Array    # times[i][j] with player i (num) and index of word j (num)    times = [[0 for i in range(len(j)-1)] for j in times_per_player]    i = 0    for layer1 in times_per_player:        # first value represents the initial starting time        j = 0        for layer0 in layer1:            if j != 0:                # e.g. times[0][0] = times_per_player[0][1] - times_per_player[0][0]                #                  = 4 - 1 = 3                times[i][j-1] = layer0 - layer1[j-1]            j += 1        i += 1    # change the order as rrequested    return game(words, times)# ----------------------------------------- Q10 ---------------------------------- #def fastest_words(game):    &quot;&quot;&quot;Return a list of lists of which words each player typed fastest.    Arguments:        game: a game data abstraction as returned by time_per_word.    Returns:        a list of lists containing which words each player typed fastest    &quot;&quot;&quot;    player_indices = range(len(all_times(game)))  # contains an *index* for each player    word_indices = range(len(all_words(game)))    # contains an *index* for each word    # BEGIN PROBLEM 10    &quot;*** YOUR CODE HERE ***&quot;    &quot;&quot;&quot;    &amp;gt;&amp;gt;&amp;gt; p0 = [2, 2, 3]    &amp;gt;&amp;gt;&amp;gt; p1 = [6, 1, 2]    &amp;gt;&amp;gt;&amp;gt; fastest_words(game([&#39;What&#39;, &#39;great&#39;, &#39;luck&#39;], [p0, p1]))    # p0 has only &#39;What&#39; faster than p1, so [&#39;What&#39;]    # p1 has both &#39;great&#39; and &#39;luck&#39; faster than p0, so [&#39;great&#39;,&#39;luck&#39;]    [[&#39;What&#39;],[&#39;great&#39;,&#39;luck&#39;]]    &amp;gt;&amp;gt;&amp;gt; p0 = [2, 2, 3]    &amp;gt;&amp;gt;&amp;gt; p1 = [6, 1, 3]    &amp;gt;&amp;gt;&amp;gt; fastest_words(game([&#39;What&#39;, &#39;great&#39;, &#39;luck&#39;], [p0, p1]))      # with a tie, choose the first player    [[&#39;What&#39;,&#39;luck&#39;],[&#39;great&#39;]]    &quot;&quot;&quot;    # see exmaple with time() by Q9    # Initial a empty Array    result = [[] for i in player_indices]    # begin with compair for word 0 with different players     for word in word_indices:        for player in player_indices:            # default set the player 0 is always the winner            # in the case of a tie, the player 0 wins             if player == 0:                winer = 0                # set the player&#39;s time as minimum                min_time = time(game, player, word)            # save the current time            cur_time = time(game, player, word)            # reset the minimum time             if cur_time &amp;lt; min_time:                min_time = cur_time                winer = player        # add the word in the array        result[winer] += [word_at(game, word)]    return result "
  }
  
]


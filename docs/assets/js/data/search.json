[
  
  {
    "title": "Python Note",
    "url": "/posts/Python-Note/",
    "categories": "Note, CS",
    "tags": "note",
    "date": "2022-06-01 10:11:00 +0000",
    





    "snippet": "1 Fundations  install pip:  $ curl https://bootstrap.pypa.io/pip/get-pip.py -o get-pip.py  $ sudo python3 get-pip.py  Some Commands:          control + d: exit()      control + l: clear      python3 -i name.py      handle = open(filename, mode)      quit(): break      append() to add elements in list      sort() to sort elements in list      split() to remove element (here (none)) from the list      dict_name.get(xxx, 0) + 1: if in dict() has xxx then xxx+1 otherwise 0+1        Position of numbers without []:&amp;gt;&amp;gt;&amp;gt; n = 18117&amp;gt;&amp;gt;&amp;gt; all_but_last, last = n // 10, n % 10all_but_last = 1811   # via //last = 7              # via %  Placeholder:          %d: decimal      %f: float      %%: percent      e.g.: print(&#39;%d + %d = %d&#39; % (a, b, a + b))       2 Coursera: PY4E2.1 Fundations  Regular Expressions and Extracting Data:          import re      re.search()      re.findall()      see e9.py                  Symbol      Explanation                  ^      Matches the beginning of a line              $      Matches the end of the line              .      Matches any character              \\s      Matches whitespace              \\S      Matches any non-whitespace character              *****      Repeats a character zero or more times              *?      Repeats a character zero or more times (non-greedy)              +      Repeats a character one or more times              +?      Repeats a character one or more times (non-greedy)              [aeiou]      Matches a single character in the listed set              [^XYZ]      Matches a single character not in the listed set              [a-z0-9]      The set of characters can include a range              ( )      Only show date inside of ()        Socket          import socket      Port 80: Web Server, HTTP(80)      decode()        Retrieving Web Pages          use Chrome to view the page source      import urllib.request, urllib.parse, urllib.error      fhand = urllib.request.urlopen(&#39;http://xxxxx&#39;)for line in fhand:	print(line.decode().strip())  Beautifulsoup4: e11.py          from bs4 import BeautifulSoup      Example to get img: https://divertingpan.github.io/post/python_tieba/        1) download BeautifulSoup4    2) unzip and Terminal geht to the folder    3) sudo python3 ./setup.py i nstall    4) pip install soupsieve    eXtensible Markup Language (XML)          share structured data      import xml.etree.ElementTree as ET      xxx.findall(‘a/b’): find all tags b from a        JavaScript Object Notation (JSON)          import json      &#39;&#39;&#39;[ xxx ]&#39;&#39;&#39;      info = json.loads(xxx)        Service Oriented Approach          Application Programming Interfaces (API)      import twurl      twurl.augment(url, {‘xx’})      GeoJason API: http://maps.googleapis.com/maps/api/geocode/json?        Class and Object          class xxx:      object: test = xxx():      function: def xxx:      subclass: class name2(class_name1):        assert expression:          test if expression is False: assert 1 == 0, &#39;xxx&#39;. This is False, so show &#39;xxx&#39;      assert 1 == 1, ‘xxx’. This is True, show nothing.      2.2 Examples  Example e1:          if error, still accept, then run yyy and continue.      try: 	xxx      except ValueError: 	yyy 	continue  Example e2:          find position, print out xxx between position 1 and 2.      text = abcdef n1 = text.find(&#39;c&#39;)n2 = text.find(&#39;f&#39;)n3 = text[n1:n2+1]print(n3)  Example e3:          use os function to use os.getcwd() to now the path and use os.chdir() to change the path      rstrip(): move the blank line      import osprint(os.getcwd())os.chdir(&#39;/Users/Terry/Desktop&#39;)# Use words.txt as the file namefname = input(&quot;Enter file name: &quot;)fh = open(fname)for line in fh:    line = line.rstrip()    line = line.upper()    print(line)  Example e5:          lst.split() error, so should use lst[0].split() to remove blank.      list(set(xx)) to remove repeated elements      fname = input(&quot;Enter file name: &quot;)fh = open(fname)lst = list()new = list()count = 0 for line in fh:    line = line.rstrip()    lst.append(line)    new = new + lst[count].split()     count = count + 1 new = list(set(new))new.sort()print(new)  Example e14:# compute the sum of the numbers in the file and enter the sum# the numbers are inside tag &#39;count&#39;address = input(&#39;Enter location: &#39;)url = address print(&#39;Retrieving&#39;, url)uh = urllib.request.urlopen(url, context=ctx)data = uh.read()print(&#39;Retrieved&#39;, len(data), &#39;characters&#39;)tree = ET.fromstring(data)sum = 0# locatate &#39;count&#39; and find them allcounts = tree.findall(&#39;.//count&#39;)print(&#39;Count:&#39;, len(counts))for count in counts:    # the numbers are &#39;text&#39; from count    sum += int(count.text)print(sum)  Databases: e17.py and e18.py          SQLite Browser      import sqlite3      Reconstructing Data with JOIN: select … from … join … on …      inside python code, should use SQL code:      xyz.execute(&#39;UPDATE xxx SET yyy=xxx WHERE xxxx&#39;)xxx = sqlite.connect(&#39;xxx.sqlite&#39;)yyy = xxx.cursor()yyy.execute(&#39;SQL code&#39;)3 CS61A3.1 Fundations  *args and **kwargs:          *args: unknown functions/parameters      **kwargs: same but list      def printed(f):     	def print_and_return(*args):         	result = f(*args)         	print(&#39;Result:&#39;, result)         	return result     	return print_and_return&amp;gt;&amp;gt;&amp;gt; printed_pow = printed(pow)&amp;gt;&amp;gt;&amp;gt; printed_pow(2, 8)Result: 256256&amp;gt;&amp;gt;&amp;gt; printed_abs = printed(abs)&amp;gt;&amp;gt;&amp;gt; printed_abs(-10)Result: 1010  Higher-Order Functions:          use function inside of function      def apply_twice(f, x):    return f(f(x))  	# here call the f function with x, f can be i.e. square def square(x):    return x * x&amp;gt;&amp;gt;&amp;gt; apply_twice(square, 2)      # f is now the function square(x) with x = 216  Lambda Expressions:          lambda &amp;lt;parameters&amp;gt;: &amp;lt;return expression&amp;gt;      (lambda &amp;lt;parameters A&amp;gt;: &amp;lt;return function&amp;gt;)(lambda &amp;lt;parameters A&amp;gt;: lambda &amp;lt;parameters B&amp;gt;:  &amp;lt;return expression&amp;gt;)      lambda is a function with formal parameter x=10 that returns the value of x*x, it’s like def      x = 10square = x * xsquare = lambda x: x * x	print(square(4))3.2 Examples  Example lab02:def cycle(f1, f2, f3):    def func1(n):                               # first to give is n times        def func2(x):                           # second to give is x            run = n                                # run n times             order = 1                             # f1, f2, f3            result = x            if run:                while run:                    if order == 1:                        result = f1(result)                    elif order == 2:                        result = f2(result)                    elif order == 3:                        result = f3(result)                    order = order % 3 + 1       # f1 -&amp;gt; f2 -&amp;gt; f3 -&amp;gt; f1                    run -= 1            return result        return func2    return func1To run this function i.e. my_cycle = cycle(add1, times2, add3)(2)(1):1) inside function cycle has input f1, f2, f32) then has inside function func1(n) and func2(x) which in this case n = 2 and x = 1, cause func1 first defined.Alternative i.e.&amp;gt;&amp;gt;&amp;gt; my_cycle = cycle(add1, times2, add3)&amp;gt;&amp;gt;&amp;gt; add_one_then_double = my_cycle(2)&amp;gt;&amp;gt;&amp;gt; add_one_then_double(1)4"
  }
  
]

